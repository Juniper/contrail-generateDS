#
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

from ifmap_global import CamelCase
from ifmap_model import IFMapIdentifier, IFMapProperty, IFMapLink, IFMapLinkAttr
from TypeGenerator import TypeGenerator

import importlib
import pprint
import re
import os
import sys

_BASE_URL = ""
_BASE_PARENT = 'config-root'
_BASE_PARENT_IMID = 'contrail:config-root:root'

def write(gen_file, gen_str):
    gen_file.write("%s\n" %(gen_str))
#end write

class IFMapApiGenerator(object):
    def __init__(self, xsd_parser, xsd_root, ident_dict, metadata_dict):
        self._xsd_parser = xsd_parser
        self._xsd_root = xsd_root
        self._ident_dict = ident_dict
        self._metadata_dict = metadata_dict
        # [<tenant>,...]")
        self._FQ_NAME_TENANT_IDX = 0
    #end __init__

    def Generate(self, gen_filepath_pfx):
        # Grab directory where to generate (if not locally)
        gen_filename_pfx = os.path.basename(gen_filepath_pfx)
        gendir = os.path.dirname(gen_filepath_pfx)
        if gendir:
           gendir = gendir + '/'

        # class defn used by both rest-api client and server
        # create a package for autogenerated code
        self._generate_package(gendir)
        # These produce classes/files per type
        self._generate_common_classes(gen_filepath_pfx)
        self._generate_client_classes(gen_filepath_pfx, gen_filename_pfx)
        self._generate_test_classes(gen_filepath_pfx, gen_filename_pfx)
        self._generate_heat_resources(gen_filepath_pfx, gen_filename_pfx)
        #self._generate_docs_classes(gen_filepath_pfx, gen_filename_pfx)

        # These produce class/file common to all types
        self._generate_conn_drv_impl(gendir + "connection_drv_gen.py", gen_filename_pfx)
        self._generate_client_impl(gendir + "vnc_api_client_gen.py", gen_filename_pfx)
        self._generate_server_impl(gendir + "vnc_api_server_gen.py", gen_filename_pfx)
        self._generate_extension_impl(gendir + "vnc_api_extension_gen.py", gen_filename_pfx)
        self._generate_test_impl(gendir + "vnc_api_test_gen.py", gen_filename_pfx)
        self._generate_docs_schema(gendir + "vnc_api_schema.py", gen_filename_pfx)
        #self._generate_docs_impl(gendir + "vnc_api_doc_gen.rst", gen_filename_pfx)
    #end Generate

    def _non_exclude_idents(self):
        _ret_idents = []
        for ident in self._ident_dict.values():
            ident_name = ident.getName()
            # TODO put Exclude on identifiers too...
            if re.match("bgp:", ident_name):
                continue
            _ret_idents.append(ident)

        return _ret_idents
    #end _non_exclude_idents

    def _generate_package(self, gendir):
        gen_file = self._xsd_parser.makeFile(gendir + "__init__.py")
    #end _generate_package

    def _generate_common_classes(self, gen_filepath_pfx):
        # XSD types to python classes
        type_genr = TypeGenerator(self._xsd_parser)
        type_genr.setLanguage('py')
        type_genr.generate(self._xsd_root, None, gen_filepath_pfx + "_xsd.py",
                           genStandAlone = False)

        gen_file = self._xsd_parser.makeFile(gen_filepath_pfx + "_common.py")
        write(gen_file, "")
        write(gen_file, "# AUTO-GENERATED file from %s. Do Not Edit!" \
              %(self.__class__.__name__))
        write(gen_file, "")
        write(gen_file, '"""')
        write(gen_file, "This module defines the classes for every configuration element managed by the system")
        write(gen_file, '"""')
        write(gen_file, "")

        for ident in self._non_exclude_idents():
            class_name = CamelCase(ident.getName())
            ident_name = ident.getName()
            method_name = ident_name.replace('-', '_')
            my_name_default = 'default-%s' %(ident.getName())
            parents = ident.getParents()

            write(gen_file, "class %s(object):" %(class_name))
            write(gen_file, '    """')
            write(gen_file, "    Represents %s configuration representation." %(ident_name))
            write(gen_file, "")
            if parents:
                write(gen_file, "    Child of:")
                for i in range(len(parents)):
                    (parent_ident, meta) = parents[i]
                    parent_class_name = CamelCase(parent_ident.getName())
                    if i == len(parents):
                        write(gen_file, "        :class:`.%s` object" %(parent_class_name))
                    else:
                        write(gen_file, "        :class:`.%s` object OR" %(parent_class_name))
                write(gen_file, "")

            write(gen_file, "    Properties:")
            for prop in ident.getProperties():
                complex_type = prop.getCType()
                xsd_type = prop.getXsdType()
                if complex_type and xsd_type:
                    write(gen_file, "        * %s (:class:`.%s` type)" %(prop.getName(), prop.getXsdType()))
                else:
                    write(gen_file, "        * %s (%s type)" %(prop.getName(), prop.getXsdType()))
            write(gen_file, "")
            write(gen_file, "    Children:")
            for link_info in ident.getLinksInfo():
                is_has = ident.isLinkHas(link_info)
                if not is_has:
                    continue
                link = ident.getLink(link_info)
                child_ident = ident.getLinkTo(link_info)
                child_class_name = CamelCase(child_ident.getName())
                write(gen_file, "        * list of :class:`.%s` objects" %(child_class_name))
            write(gen_file, "")
            write(gen_file, "    References to:")
            for link_info in ident.getLinksInfo():
                link = ident.getLink(link_info)
                to_ident = ident.getLinkTo(link_info)
                to_class_name = CamelCase(to_ident.getName())
                is_ref = ident.isLinkRef(link_info)
                if not is_ref:
                    continue
                link_attr_type = link.getXsdType()
                if link_attr_type: # link with attr
                    write(gen_file, "        * list of (:class:`.%s` object, :class:`.%s` attribute)" %(to_class_name, link_attr_type))
                else:
                    write(gen_file, "        * list of :class:`.%s` objects" %(to_class_name))
            write(gen_file, "")
            write(gen_file, "    Referred by:")
            for back_link_info in ident.getBackLinksInfo():
                if not ident.isLinkRef(back_link_info):
                    continue
                from_ident = ident.getBackLinkFrom(back_link_info)
                from_class_name = CamelCase(from_ident.getName())
                write(gen_file, "        * list of :class:`.%s` objects" %(from_class_name))
            write(gen_file, '    """')
            write(gen_file, "")

            prop_fields = [prop.getName().replace('-', '_') for prop in ident.getProperties()]
            ref_fields = ['%s_refs' %(ref_ident.getName().replace('-', '_')) for ref_ident in ident.getReferences()]
            back_ref_fields = ['%s_back_refs' %(back_ref_ident.getName().replace('-', '_')) for back_ref_ident in ident.getBackReferences()]
            children_fields = ['%ss' %(child_ident.getName().replace('-', '_')) for child_ident in ident.getChildren()]
            write(gen_file, "    prop_fields = set(%s)" %(prop_fields))
            write(gen_file, "    ref_fields = set(%s)" %(ref_fields))
            write(gen_file, "    backref_fields = set(%s)" %(back_ref_fields))
            write(gen_file, "    children_fields = set(%s)" %(children_fields))
            write(gen_file, "")
            prop_field_type_vals = [('%s' %(prop.getName().replace('-', '_')),
                                     (prop.getCType() is None, '%s' %(prop.getXsdType()))) for prop in ident.getProperties()]
            write(gen_file, "    prop_field_types = {}")
            for k,v in prop_field_type_vals:
                write(gen_file, "    prop_field_types['%s'] = %s" %(k,v))
            write(gen_file, "")
            ref_field_type_vals = [('%s_refs' %(ident.getLinkTo(li).getName().replace('-', '_')),
                                    (ident.getLinkTo(li).getName(),
                                     ident.getLink(li).getXsdType(),
                                     ident.isLinkDerived(li))
                                   ) for li in ident.getLinksInfo()
                                     if ident.isLinkRef(li)]
            write(gen_file, "    ref_field_types = {}")
            for ref_field, (ref_type, ref_link_type, is_weakref) in ref_field_type_vals:
                write(gen_file, "    ref_field_types['%s'] = ('%s', '%s', %s)"
                      %(ref_field, ref_type, ref_link_type, is_weakref))
            write(gen_file, "")
            backref_field_type_vals = [('%s_back_refs' %(ident.getLinkTo(li).getName().replace('-', '_')),
                                    (ident.getBackLinkFrom(li).getName(),
                                     ident.getBackLink(li).getXsdType(),
                                     ident.isLinkDerived(li))
                                   ) for li in ident.getBackLinksInfo()
                                     if ident.isLinkRef(li)]
            write(gen_file, "    backref_field_types = {}")
            for backref_field, (backref_type, backref_link_type, is_weakref) in backref_field_type_vals:
                write(gen_file, "    backref_field_types['%s'] = ('%s', '%s', %s)"
                      %(backref_field, backref_type, backref_link_type, is_weakref))
            write(gen_file, "")
            children_field_type_vals = [('%ss' %(child_ident.getName().replace('-', '_')),
                                         (child_ident.getName(),
                                          child_ident.isDerived()))
                                        for child_ident in ident.getChildren()]
            write(gen_file, "    children_field_types = {}")
            for child_field, (child_type, is_derived) in children_field_type_vals:
                write(gen_file, "    children_field_types['%s'] = ('%s', %s)"
                    %(child_field, child_type, is_derived))
            write(gen_file, "")
            if parents:
                p_class_names = [CamelCase(p_ident.getName())
                                 for p_ident, _ in parents if p_ident.getName() != 'config-root']
                write(gen_file, "    parent_types = %s" %(p_class_names))
            else:
                write(gen_file, "    parent_types = []")
            write(gen_file, "")
            prop_field_meta_vals = [('%s' %(prop.getName().replace('-', '_')),
                                     '%s' %(prop.getName())) for prop in ident.getProperties()]
            write(gen_file, "    prop_field_metas = {}")
            for k,v in prop_field_meta_vals:
                write(gen_file, "    prop_field_metas['%s'] = '%s'" %(k,v))
            write(gen_file, "")
            ref_field_meta_vals = [('%s_refs' %(ident.getLinkTo(li).getName().replace('-', '_')),
                                    '%s' %(ident.getLink(li).getName()))
                                   for li in ident.getLinksInfo()
                                   if ident.isLinkRef(li)]
            write(gen_file, "    ref_field_metas = {}")
            for ref_field, ref_meta in ref_field_meta_vals:
                write(gen_file, "    ref_field_metas['%s'] = '%s'"
                      %(ref_field, ref_meta))
            write(gen_file, "")
            children_field_meta_vals = [('%ss' %(ident.getLinkTo(li).getName().replace('-', '_')),
                                         '%s' %(ident.getLink(li).getName()))
                                        for li in ident.getLinksInfo()
                                        if ident.isLinkHas(li)]
            write(gen_file, "    children_field_metas = {}")
            for k,v in children_field_meta_vals:
                write(gen_file, "    children_field_metas['%s'] = '%s'" %(k,v))
            write(gen_file, "")
            prop_list_fields = [prop.getName().replace('-', '_')
                for prop in ident.getProperties() if prop.isList()]
            write(gen_file, "    prop_list_fields = set(%s)" %(prop_list_fields))
            write(gen_file, "")
            prop_list_field_has_wrapper_vals = [
                ('%s' %(prop.getName().replace('-', '_')),
                 prop.isListUsingWrapper()) for prop in ident.getProperties() if prop.isList()]
            write(gen_file, "    prop_list_field_has_wrappers = {}")
            for k,v in prop_list_field_has_wrapper_vals:
                write(gen_file, "    prop_list_field_has_wrappers['%s'] = %s" %(k,v))
            write(gen_file, "")

            prop_map_fields = [prop.getName().replace('-', '_')
                for prop in ident.getProperties() if prop.isMap()]
            write(gen_file, "    prop_map_fields = set(%s)" %(prop_map_fields))
            write(gen_file, "")
            prop_map_field_has_wrapper_vals = [
                ('%s' %(prop.getName().replace('-', '_')),
                 prop.isMapUsingWrapper()) for prop in ident.getProperties() if prop.isMap()]
            write(gen_file, "    prop_map_field_has_wrappers = {}")
            for k,v in prop_map_field_has_wrapper_vals:
                write(gen_file, "    prop_map_field_has_wrappers['%s'] = %s" %(k,v))
            write(gen_file, "")
            prop_map_field_key_name_vals = [
                ('%s' %(prop.getName().replace('-', '_')),
                 prop.getMapKeyName()) for prop in ident.getProperties() if prop.isMap()]
            write(gen_file, "    prop_map_field_key_names = {}")
            for k,v in prop_map_field_key_name_vals:
                write(gen_file, "    prop_map_field_key_names['%s'] = '%s'" %(k,v))
            write(gen_file, "")

            # init args are name, parent_obj(if there is one), props
            init_args = "self, name = None"
            if parents:
                init_args = init_args + ", parent_obj = None"
            for prop in ident.getProperties():
                prop_name = prop.getName().replace('-', '_')
                init_args = init_args + ", %s = None" %(prop_name)

            write(gen_file, "    def __init__(%s, *args, **kwargs):" %(init_args))
            write(gen_file, "        # type-independent fields")
            write(gen_file, "        self._type = '%s'" %(ident_name))
            write(gen_file, "        if not name:")
            write(gen_file, "            name = u'%s'" %(my_name_default))
            write(gen_file, "        self.name = name")
            write(gen_file, "        self._uuid = None")
            if parents:
                write(gen_file, "        # Determine parent type and fq_name")
                write(gen_file, "        kwargs_parent_type = kwargs.get('parent_type', None)")
                write(gen_file, "        kwargs_fq_name = kwargs.get('fq_name', None)")
                write(gen_file, "        if parent_obj:")
                write(gen_file, "            self.parent_type = parent_obj._type")
                write(gen_file, "            # copy parent's fq_name")
                write(gen_file, "            self.fq_name = list(parent_obj.fq_name)")
                write(gen_file, "            self.fq_name.append(name)")
                write(gen_file, "        elif kwargs_parent_type and kwargs_fq_name:")
                write(gen_file, "            self.parent_type = kwargs_parent_type")
                write(gen_file, "            self.fq_name = kwargs_fq_name")
                write(gen_file, "        else: # No parent obj specified")
                if len(parents) > 1:
                    # use config-root if it is one of the possible parents
                    if 'config-root' in [parent_ident.getName() for (parent_ident, meta) in parents]:
                        write(gen_file, "            fq_name = [name]")
                    else:
                        write(gen_file, "            # if obj constructed from within server, ignore if parent not specified")
                        write(gen_file, "            if not kwargs['parent_type']:")
                        parent_fq_names = [parent_ident.getDefaultFQName() for (parent_ident, meta) in parents]
                        write(gen_file, "                raise AmbiguousParentError(\"%s\")" %(parent_fq_names))
                else: # only one possible parent
                    (parent_ident, meta) = parents[0]
                    if parent_ident.getName() == _BASE_PARENT:
                        write(gen_file, "            self.fq_name = [name]")
                    else: # parent is not config-root
                        parent_name = parent_ident.getName()
                        parent_default_fq_name = parent_ident.getDefaultFQName()
                        write(gen_file, "            self.parent_type = '%s'" %(parent_name))
                        write(gen_file, "            self.fq_name = %s" %(parent_default_fq_name))
                        write(gen_file, "            self.fq_name.append(name)")
                        write(gen_file, "")
                    #end parent is config-root check
                #end num possible parents check
            else: # no parent in schema
                write(gen_file, "        self.fq_name = [name]")
            #end parents exist in schema check

            write(gen_file, "")

            write(gen_file, "        # property fields")
            for prop in ident.getProperties():
                prop_name = prop.getName().replace('-', '_')
                write(gen_file, "        if %s is not None:" %(prop_name))
                write(gen_file, "            self._%s = %s" %(prop_name, prop_name))

            write(gen_file, "    #end __init__")
            write(gen_file, "")

            # Getters for type independent fields
            write(gen_file, "    def get_type(self):")
            write(gen_file, '        """Return object type (%s)."""' %(ident_name))
            write(gen_file, "        return self._type")
            write(gen_file, "    #end get_type")
            write(gen_file, "")
            write(gen_file, "    def get_fq_name(self):")
            write(gen_file, '        """Return FQN of %s in list form."""' %(ident_name))
            write(gen_file, "        return self.fq_name")
            write(gen_file, "    #end get_fq_name")
            write(gen_file, "")
            write(gen_file, "    def get_fq_name_str(self):")
            write(gen_file, '        """Return FQN of %s as colon delimited string."""' %(ident_name))
            write(gen_file, "        return ':'.join(self.fq_name)")
            write(gen_file, "    #end get_fq_name_str")
            write(gen_file, "")
            if parents:
                write(gen_file, "    @property")
                write(gen_file, "    def parent_name(self):")
                write(gen_file, "        return self.fq_name[:-1][-1]")
                write(gen_file, "    #end parent_name")
                write(gen_file, "")
                write(gen_file, "    def get_parent_fq_name(self):")
                write(gen_file, '        """Return FQN of %s\'s parent in list form."""' %(ident_name))
                write(gen_file, "        if not hasattr(self, 'parent_type'):")
                write(gen_file, "            # child of config-root")
                write(gen_file, "            return None")
                write(gen_file, "")
                write(gen_file, "        return self.fq_name[:-1]")
                write(gen_file, "    #end get_parent_fq_name")
                write(gen_file, "")
                write(gen_file, "    def get_parent_fq_name_str(self):")
                write(gen_file, '        """Return FQN of %s\'s parent as colon delimted string."""' %(ident_name))
                write(gen_file, "        if not hasattr(self, 'parent_type'):")
                write(gen_file, "            # child of config-root")
                write(gen_file, "            return None")
                write(gen_file, "")
                write(gen_file, "        return ':'.join(self.fq_name[:-1])")
                write(gen_file, "    #end get_parent_fq_name_str")
                write(gen_file, "")

            # Getters and Setters for common fields
            write(gen_file, "    @property")
            write(gen_file, "    def uuid(self):")
            write(gen_file, "        return getattr(self, '_uuid', None)")
            write(gen_file, "    #end uuid")
            write(gen_file, "")
            write(gen_file, "    @uuid.setter")
            write(gen_file, "    def uuid(self, uuid_val):")
            write(gen_file, "        self._uuid = uuid_val")
            write(gen_file, "    #end uuid")
            write(gen_file, "")
            write(gen_file, "    def set_uuid(self, uuid_val):")
            write(gen_file, "        self.uuid = uuid_val")
            write(gen_file, "    #end set_uuid")
            write(gen_file, "")
            write(gen_file, "    def get_uuid(self):")
            write(gen_file, "        return self.uuid")
            write(gen_file, "    #end get_uuid")
            write(gen_file, "")

            # Getters and Setters for properties
            for prop in ident.getProperties():
                prop_name = prop.getName().replace('-', '_')
                prop_type = prop.getXsdType()
                write(gen_file, "    @property")
                write(gen_file, "    def %s(self):" %(prop_name))
                write(gen_file, '        """Get %s for %s.' %(prop.getName(), ident_name))
                write(gen_file, '        ')
                write(gen_file, '        :returns: %s object' % (prop_type))
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        return getattr(self, '_%s', None)" %(prop_name))
                write(gen_file, "    #end %s" %(prop_name))
                write(gen_file, "")
                write(gen_file, "    @%s.setter" %(prop_name))
                write(gen_file, "    def %s(self, %s):" %(prop_name, prop_name))
                write(gen_file, '        """Set %s for %s.' %(prop.getName(), ident_name))
                write(gen_file, '        ')
                write(gen_file, '        :param %s: %s object' % (prop_name, prop_type))
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        self._%s = %s" %(prop_name, prop_name))
                write(gen_file, "    #end %s" %(prop_name))
                write(gen_file, "")
                write(gen_file, "    def set_%s(self, value):" %(prop_name))
                write(gen_file, "        self.%s = value" %(prop_name))
                write(gen_file, "    #end set_%s" %(prop_name))
                write(gen_file, "")
                write(gen_file, "    def get_%s(self):" %(prop_name))
                write(gen_file, "        return self.%s" %(prop_name))
                write(gen_file, "    #end get_%s" %(prop_name))
                write(gen_file, "")

            write(gen_file, "    def _serialize_field_to_json(self, serialized, fields_to_serialize, field_name):")
            write(gen_file, "        if fields_to_serialize is None: # all fields are serialized")
            write(gen_file, "            serialized[field_name] = getattr(self, field_name)")
            write(gen_file, "        elif field_name in fields_to_serialize:")
            write(gen_file, "            serialized[field_name] = getattr(self, field_name)")
            write(gen_file, "    #end _serialize_field_to_json")
            write(gen_file, "")
            write(gen_file, "    def serialize_to_json(self, field_names = None):")
            write(gen_file, "        serialized = {}")
            write(gen_file, "")
            write(gen_file, "        # serialize common fields")
            write(gen_file, "        self._serialize_field_to_json(serialized, ['uuid'], 'uuid')")
            write(gen_file, "        self._serialize_field_to_json(serialized, field_names, 'fq_name')")
            write(gen_file, "        if hasattr(self, 'parent_type'):")
            write(gen_file, "            self._serialize_field_to_json(serialized, field_names, 'parent_type')")
            write(gen_file, "")

            write(gen_file, "        # serialize property fields")
            for prop in ident.getProperties():
                prop_name = prop.getName().replace('-', '_')
                write(gen_file, "        if hasattr(self, '_%s'):" %(prop_name))
                write(gen_file, "            self._serialize_field_to_json(serialized, field_names, '%s')" %(prop_name))
            write(gen_file, "")

            write(gen_file, "        # serialize reference fields")
            for link_info in ident.getLinksInfo():
                link = ident.getLink(link_info)
                to_ident = ident.getLinkTo(link_info)
                to_name = to_ident.getName().replace('-', '_')
                is_ref = ident.isLinkRef(link_info)
                if not is_ref:
                    continue
                write(gen_file, "        if hasattr(self, '%s_refs'):" %(to_name))
                write(gen_file, "            self._serialize_field_to_json(serialized, field_names, '%s_refs')" %(to_name))

            write(gen_file, "        return serialized")
            write(gen_file, "    #end serialize_to_json")

            write(gen_file, "")

            # Getters and Setters for all types of links
            # TODO use one loop of getLinksInfo for 'has', 'ref' and implicit backref
            for link_info in ident.getLinksInfo():
                link = ident.getLink(link_info)
                child_ident = ident.getLinkTo(link_info)
                child_name = child_ident.getName().replace('-', '_')
                is_has = ident.isLinkHas(link_info)
                if not is_has:
                    continue
                # only getter from parent to children
                write(gen_file, "    def get_%ss(self):" %(child_name))
                write(gen_file, "        return getattr(self, '%ss', None)" %(child_name))
                write(gen_file, "    #end get_%ss" %(child_name))
                write(gen_file, "")

            for link_info in ident.getLinksInfo():
                link = ident.getLink(link_info)
                to_ident = ident.getLinkTo(link_info)
                to_name = to_ident.getName().replace('-', '_')
                is_ref = ident.isLinkRef(link_info)
                if not is_ref:
                    continue
                set_one_args = "self, ref_obj"
                add_one_args = "self, ref_obj"
                del_one_args = "self, ref_obj"
                set_list_args = "self, ref_obj_list"
                if link.getXsdType(): # link with attr
                   set_one_args = set_one_args + ", ref_data"
                   add_one_args = set_one_args
                   set_list_args = set_list_args + ", ref_data_list"

                   set_one_val = "[{'to':ref_obj.get_fq_name(), 'attr':ref_data}]"
                   add_one_val = "{'to':ref_obj.get_fq_name(), 'attr':ref_data}"
                   set_list_val = "[{'to':ref_obj_list[i], 'attr':ref_data_list[i]} for i in range(len(ref_obj_list))]"
                else: # link with no attr
                   # TODO always put attr with None?
                   set_one_val = "[{'to':ref_obj.get_fq_name()}]"
                   add_one_val = "{'to':ref_obj.get_fq_name()}"
                   set_list_val = "ref_obj_list"
                write(gen_file, "    def set_%s(%s):" %(to_name, set_one_args))
                write(gen_file, '        """Set %s for %s.' %(to_ident.getName(), ident_name))
                write(gen_file, '        ')
                write(gen_file, '        :param ref_obj: %s object' %(CamelCase(to_ident.getName())))
                if link.getXsdType():
                    write(gen_file, '        :param ref_data: %s object' %(link.getXsdType()))
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        self.%s_refs = %s" %(to_name, set_one_val))
                write(gen_file, "        if ref_obj.uuid:")
                write(gen_file, "            self.%s_refs[0]['uuid'] = ref_obj.uuid" %(to_name))
                write(gen_file, "")
                write(gen_file, "    #end set_%s" %(to_name))
                write(gen_file, "")
                write(gen_file, "    def add_%s(%s):" %(to_name, add_one_args))
                write(gen_file, '        """Add %s to %s.' %(to_ident.getName(), ident_name))
                write(gen_file, '        ')
                write(gen_file, '        :param ref_obj: %s object' %(CamelCase(to_ident.getName())))
                if link.getXsdType():
                    write(gen_file, '        :param ref_data: %s object' %(link.getXsdType()))
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        refs = getattr(self, '%s_refs', [])" %(to_name))
                write(gen_file, "        if not refs:")
                write(gen_file, "            self.%s_refs = []" %(to_name))
                write(gen_file, "")
                write(gen_file, "        # if ref already exists, update any attr with it")
                write(gen_file, "        for ref in refs:")
                write(gen_file, "            if ref['to'] == ref_obj.get_fq_name():")
                write(gen_file, "                ref = %s" %(add_one_val))
                write(gen_file, "                if ref_obj.uuid:")
                write(gen_file, "                    ref['uuid'] = ref_obj.uuid")
                write(gen_file, "                return")
                write(gen_file, "")
                write(gen_file, "        # ref didn't exist before")
                write(gen_file, "        ref_info = %s" %(add_one_val))
                write(gen_file, "        if ref_obj.uuid:")
                write(gen_file, "            ref_info['uuid'] = ref_obj.uuid")
                write(gen_file, "")
                write(gen_file, "        self.%s_refs.append(ref_info)" %(to_name))
                write(gen_file, "    #end add_%s" %(to_name))
                write(gen_file, "")
                write(gen_file, "    def del_%s(%s):" %(to_name, del_one_args))
                write(gen_file, "        refs = self.get_%s_refs()" %(to_name))
                write(gen_file, "        if not refs:")
                write(gen_file, "            return")
                write(gen_file, "")
                write(gen_file, "        for ref in refs:")
                write(gen_file, "            if ref['to'] == ref_obj.get_fq_name():")
                write(gen_file, "                self.%s_refs.remove(ref)" %(to_name))
                write(gen_file, "                return")
                write(gen_file, "    #end del_%s" %(to_name))
                write(gen_file, "")
                write(gen_file, "    def set_%s_list(%s):" %(to_name, set_list_args))
                write(gen_file, '        """Set %s list for %s.' %(to_ident.getName(), ident_name))
                write(gen_file, '        ')
                write(gen_file, '        :param ref_obj_list: list of %s object' %(CamelCase(to_ident.getName())))
                if link.getXsdType():
                    write(gen_file, '        :param ref_data_list: list of %s object' %(link.getXsdType()))
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        self.%s_refs = %s" %(to_name, set_list_val))
                write(gen_file, "    #end set_%s_list" %(to_name))
                write(gen_file, "")
                write(gen_file, "    def get_%s_refs(self):" %(to_name))
                write(gen_file, '        """Return %s list for %s.' %(to_ident.getName(), ident_name))
                write(gen_file, '        ')
                if link.getXsdType():
                    write(gen_file, '        :returns: list of tuple <%s, %s>' % (CamelCase(to_ident.getName()),
                                                link.getXsdType()))
                else:
                    write(gen_file, '        :returns: list of <%s>' % (CamelCase(to_ident.getName())))
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        return getattr(self, '%s_refs', None)" %(to_name))
                write(gen_file, "    #end get_%s_refs" %(to_name))
                write(gen_file, "")

            # Getters for back reference links
            for back_link_info in ident.getBackLinksInfo():
                from_ident = ident.getBackLinkFrom(back_link_info)
                from_name = from_ident.getName().replace('-', '_')
                write(gen_file, "    def get_%s_back_refs(self):" %(from_name))
                write(gen_file, '        """Return list of all %ss using this %s"""' % (from_ident.getName(),ident_name))
                write(gen_file, "        return getattr(self, '%s_back_refs', None)" %(from_name))
                write(gen_file, "    #end get_%s_back_refs" %(from_name))
                write(gen_file, "")

            # dump method
            write(gen_file, "    def dump(self):")
            write(gen_file, '        """Display %s object in compact form."""' %(ident_name))
            write(gen_file, "        print '------------ %s ------------'" % (ident_name))
            write(gen_file, "        print 'Name = ', self.get_fq_name()")
            write(gen_file, "        print 'Uuid = ', self.uuid")
            if parents:
                write(gen_file, "        if hasattr(self, 'parent_type'): # non config-root children")
                write(gen_file, "            print 'Parent Type = ', self.parent_type")
            for prop in ident.getProperties():
                prop_name = prop.getName().replace('-', '_')
                write(gen_file, "        print 'P %s = ', self.get_%s()" %(prop_name, prop_name))
            for link_info in ident.getLinksInfo():
                to_ident = ident.getLinkTo(link_info)
                to_ident_name = to_ident.getName().replace('-', '_')
                is_ref = ident.isLinkRef(link_info)
                if is_ref:
                    write(gen_file, "        print 'REF %s = ', self.get_%s_refs()" %(to_ident_name, to_ident_name))
                else:
                    write(gen_file, "        print 'HAS %s = ', self.get_%ss()" %(to_ident_name, to_ident_name))
            for back_link_info in ident.getBackLinksInfo():
                if not ident.isLinkRef(back_link_info):
                    continue
                from_ident = ident.getBackLinkFrom(back_link_info)
                from_ident_name = from_ident.getName().replace('-', '_')
                write(gen_file, "        print 'BCK %s = ', self.get_%s_back_refs()" %(from_ident_name, from_ident_name))
            write(gen_file, "    #end dump")
            write(gen_file, "")

            write(gen_file, "#end class %s" %(class_name))
            write(gen_file, "")

    #end _generate_common_classes

    def _generate_client_classes(self, gen_filepath_pfx, gen_filename_pfx):
        gen_file = self._xsd_parser.makeFile(gen_filepath_pfx + "_client.py")
        write(gen_file, "")
        write(gen_file, "# AUTO-GENERATED file from %s. Do Not Edit!" \
              %(self.__class__.__name__))
        write(gen_file, "")
        write(gen_file, "import vnc_api.gen.%s_common" %(gen_filename_pfx))
        write(gen_file, "import vnc_api.gen.%s_xsd" %(gen_filename_pfx))
        write(gen_file, "")

        write(gen_file, "")
        for ident in self._non_exclude_idents():
            parents = ident.getParents()
            class_name = CamelCase(ident.getName())
            method_name = ident.getName().replace('-', '_')
            write(gen_file, "class %s(vnc_api.gen.%s_common.%s):" \
                                   %(class_name, gen_filename_pfx, class_name))
            write(gen_file, "    create_uri = ''")
            write(gen_file, "    resource_uri_base = {}")

            # init args are name, parent_obj(if there is one), props
            init_args = "self, name = None"
            super_args = "name"
            if parents:
                init_args = init_args + ", parent_obj = None"
                super_args = super_args + ", parent_obj"

            for prop in ident.getProperties():
                prop_name = prop.getName().replace('-', '_')
                init_args = init_args + ", %s = None" %(prop_name)
                super_args = super_args + ", %s" %(prop_name)

            write(gen_file, "    def __init__(%s, *args, **kwargs):" %(init_args))
            if parents:
                write(gen_file, "        pending_fields = ['fq_name', 'parent_type']")
            else:
                write(gen_file, "        pending_fields = ['fq_name']")
            write(gen_file, "")
            write(gen_file, "        self._server_conn = None")
            write(gen_file, "")
            for prop in ident.getProperties():
                prop_name = prop.getName().replace('-', '_')
                write(gen_file, "        if %s is not None:" %(prop_name))
                write(gen_file, "            pending_fields.append('%s')" %(prop_name))

            write(gen_file, "")
            write(gen_file, "        self._pending_field_updates = set(pending_fields)")
            write(gen_file, "        # dict of prop-list-fields with list of opers")
            write(gen_file, "        self._pending_field_list_updates = {}")
            write(gen_file, "        # dict of prop-map-fields with list of opers")
            write(gen_file, "        self._pending_field_map_updates = {}")
            write(gen_file, "        self._pending_ref_updates = set([])")
            write(gen_file, "")
            write(gen_file, "        super(%s, self).__init__(%s, *args, **kwargs)" %(class_name, super_args))
            write(gen_file, "    #end __init__")
            write(gen_file, "")
            write(gen_file, "    def get_pending_updates(self):")
            write(gen_file, "        return self._pending_field_updates")
            write(gen_file, "    #end get_pending_updates")
            write(gen_file, "")
            write(gen_file, "    def get_ref_updates(self):")
            write(gen_file, "        return self._pending_ref_updates")
            write(gen_file, "    #end get_ref_updates")
            write(gen_file, "")
            write(gen_file, "    def clear_pending_updates(self):")
            write(gen_file, "        self._pending_field_updates = set([])")
            write(gen_file, "        self._pending_field_list_updates = {}")
            write(gen_file, "        self._pending_field_map_updates = {}")
            write(gen_file, "        self._pending_ref_updates = set([])")
            write(gen_file, "    #end clear_pending_updates")
            write(gen_file, "")
            write(gen_file, "    def set_server_conn(self, vnc_api_handle):")
            write(gen_file, "        self._server_conn = vnc_api_handle")
            write(gen_file, "    #end set_server_conn")
            write(gen_file, "")
            write(gen_file, "    @classmethod")
            write(gen_file, "    def from_dict(cls, **kwargs):")
            write(gen_file, "        props_dict = {}")
            for prop in ident.getProperties():
                prop_name = prop.getName().replace('-', '_')
                complex_type = prop.getCType()
                xsd_type = prop.getXsdType()
                write(gen_file, "        if '%s' in kwargs:" %(prop_name))
                if complex_type and xsd_type:
                    write(gen_file, "            if kwargs['%s'] is None:" % prop_name)
                    write(gen_file, "                props_dict['%s'] = None" % prop_name)
                    write(gen_file, "            else:")
                    if ((prop.isList() and not prop.isListUsingWrapper()) or
                        (prop.isMap() and not prop.isMapUsingWrapper())):
                        write(gen_file, "                props_dict['%s'] = []" %(prop_name))
                        write(gen_file, "                for elem in kwargs['%s']:" %(prop_name))
                        write(gen_file, "                    props_dict['%s'].append(" %(prop_name))
                        write(gen_file, "                        vnc_api.gen.%s_xsd.%s(**elem))" \
                                                                 %(gen_filename_pfx, xsd_type))
                    else:
                        write(gen_file, "                props_dict['%s'] = vnc_api.gen.%s_xsd.%s(**kwargs['%s'])" \
                                                                 %(prop_name, gen_filename_pfx, xsd_type, prop_name))
                else:
                    write(gen_file, "            props_dict['%s'] = kwargs['%s']" %(prop_name, prop_name))

            write(gen_file, "")
            write(gen_file, "        # obj constructor takes only props")
            write(gen_file, "        parent_type = kwargs.get('parent_type', None)")
            write(gen_file, "        fq_name = kwargs['fq_name']")
            write(gen_file, "        props_dict.update({'parent_type': parent_type, 'fq_name': fq_name})")
            write(gen_file, "        obj = %s(fq_name[-1], **props_dict)" %(class_name))
            write(gen_file, "        obj.uuid = kwargs['uuid']")
            write(gen_file, "        if 'parent_uuid' in kwargs:")
            write(gen_file, "            obj.parent_uuid = kwargs['parent_uuid']")
            write(gen_file, "")
            write(gen_file, "        # add summary of any children...")
            children_idents = ident.getChildren()
            if children_idents:
                for child_ident in children_idents:
                    child_name = child_ident.getName()
                    child_method_name = child_name.replace('-', '_')
                    write(gen_file, "        if '%ss' in kwargs:" %(child_method_name))
                    write(gen_file, "            obj.%ss = kwargs['%ss']" %(child_method_name, child_method_name))
                    #write(gen_file, "            for child in kwargs['%ss']:" %(child_method_name))
                    #write(gen_file, "                child_obj = ChildObj(child['to'], child['uuid'])")
                    #write(gen_file, "            if not obj.get_%ss():" %(child_method_name))
                    #write(gen_file, "                obj.%ss = []" %(child_method_name))
                    #write(gen_file, "            obj.%ss.append(child_obj)" %(child_method_name))
            write(gen_file, "")

            write(gen_file, "        # add any specified references...")
            for link_info in ident.getLinksInfo():
                if not ident.isLinkRef(link_info):
                    continue
                link = ident.getLink(link_info)
                link_name = link.getName()
                link_type = ident.getLink(link_info).getXsdType()
                to_ident = ident.getLinkTo(link_info)
                to_name = to_ident.getName().replace('-', '_')
                write(gen_file, "        if '%s_refs' in kwargs:" %(to_name))
                write(gen_file, "            obj.%s_refs = kwargs['%s_refs']" %(to_name, to_name))
                if link_type: # link with attributes
                    write(gen_file, "            for ref in obj.%s_refs:" %(to_name))
                    write(gen_file, "                ref['attr'] = vnc_api.gen.%s_xsd.%s(**ref['attr'])" %(gen_filename_pfx, link_type))
                #    write(gen_file, "                obj.add_%s(ref_obj)" %(to_name))

            write(gen_file, "")
            write(gen_file, "        # and back references but no obj api for it...")
            for back_link_info in ident.getBackLinksInfo():
                if not ident.isLinkRef(back_link_info):
                    continue
                back_link = ident.getLink(back_link_info)
                back_link_name = back_link.getName()
                back_link_type = ident.getLink(back_link_info).getXsdType()
                from_ident = ident.getBackLinkFrom(back_link_info)
                from_name = from_ident.getName().replace('-', '_')
                write(gen_file, "        if '%s_back_refs' in kwargs:" %(from_name))
                write(gen_file, "            obj.%s_back_refs = kwargs['%s_back_refs']" %(from_name, from_name))
                #write(gen_file, "            obj.%s_back_refs = []" %(from_name))
                #write(gen_file, "            for back_ref in kwargs['%s_back_refs']:" %(from_name))
                #if back_link_type: # link with attributes
                #    write(gen_file, "                back_ref['attr'] = vnc_api.gen.%s_xsd.%s(**back_ref['attr'])" \
                #                                                                        %(gen_filename_pfx, back_link_type))
                #write(gen_file, "                obj.%s_back_refs.append(back_ref)" %(from_name))

            write(gen_file, "")
            write(gen_file, "        return obj")
            write(gen_file, "    #end from_dict")
            write(gen_file, "")

            # Setters for common fields
            write(gen_file, "    @vnc_api.gen.%s_common.%s.uuid.setter" %(gen_filename_pfx, class_name))
            write(gen_file, "    def uuid(self, uuid_val):")
            write(gen_file, "        self._uuid = uuid_val")
            write(gen_file, "        if 'uuid' not in self._pending_field_updates:")
            write(gen_file, "            self._pending_field_updates.add('uuid')")
            write(gen_file, "    #end uuid")
            write(gen_file, "")
            write(gen_file, "    def set_uuid(self, uuid_val):")
            write(gen_file, "        self.uuid = uuid_val")
            write(gen_file, "    #end set_uuid")
            write(gen_file, "")

            # Setters for properties
            for prop in ident.getProperties():
                prop_name = prop.getName().replace('-', '_')
                prop_type = prop.getXsdType()
                write(gen_file, "    @vnc_api.gen.%s_common.%s.%s.setter" %(gen_filename_pfx, class_name, prop_name))
                write(gen_file, "    def %s(self, %s):" %(prop_name, prop_name))
                write(gen_file, '        """Set %s for %s.' %(prop.getName(), ident.getName()))
                write(gen_file, '        ')
                write(gen_file, '        :param %s: %s object' % (prop_name, prop_type))
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        if '%s' not in self._pending_field_updates:" %(prop_name))
                write(gen_file, "            self._pending_field_updates.add('%s')" %(prop_name))
                write(gen_file, "")
                if prop.isList():
                    write(gen_file, "        if '%s' in self._pending_field_list_updates:" %(prop_name))
                    write(gen_file, "            # set clobbers earlier add/del on prop list elements")
                    write(gen_file, "            del self._pending_field_list_updates['%s']" %(prop_name))
                    write(gen_file, "")
                if prop.isMap():
                    write(gen_file, "        if '%s' in self._pending_field_map_updates:" %(prop_name))
                    write(gen_file, "            # set clobbers earlier add/del on prop map elements")
                    write(gen_file, "            del self._pending_field_map_updates['%s']" %(prop_name))
                    write(gen_file, "")
                write(gen_file, "        self._%s = %s" %(prop_name, prop_name))
                write(gen_file, "    #end %s" %(prop_name))
                write(gen_file, "")
                write(gen_file, "    def set_%s(self, value):" %(prop_name))
                write(gen_file, "        self.%s = value" %(prop_name))
                write(gen_file, "    #end set_%s" %(prop_name))
                write(gen_file, "")

            # Atomic Setters for properties that are lists
            for prop in ident.getProperties():
                if not prop.isList():
                    continue
                prop_name = prop.getName().replace('-', '_')
                write(gen_file, "    def add_%s(self, elem_value, elem_position=None):" %(prop_name))
                write(gen_file, '        """Add element to %s for %s.' %(prop.getName(), ident.getName()))
                write(gen_file, '        ')
                write(gen_file, '        :param elem_value: %s object' % (prop_type))
                write(gen_file, '        :param elem_position: optional string order-key')
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        if '%s' not in self._pending_field_list_updates:" %(prop_name))
                write(gen_file, "            self._pending_field_list_updates['%s'] = [" %(prop_name))
                write(gen_file, "                ('add', elem_value, elem_position)]")
                write(gen_file, "        else:")
                write(gen_file, "            self._pending_field_list_updates['%s'].append(" %(prop_name))
                write(gen_file, "                ('add', elem_value, elem_position))")
                write(gen_file, "    #end add_%s" %(prop_name))
                write(gen_file, "")
                write(gen_file, "    def del_%s(self, elem_position):" %(prop_name))
                write(gen_file, '        """Delete element from %s for %s.' %(prop.getName(), ident.getName()))
                write(gen_file, '        ')
                write(gen_file, '        :param elem_position: string indicating order-key')
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        if '%s' not in self._pending_field_list_updates:" %(prop_name))
                write(gen_file, "            self._pending_field_list_updates['%s'] = [" %(prop_name))
                write(gen_file, "                ('delete', None, elem_position)]")
                write(gen_file, "        else:")
                write(gen_file, "            self._pending_field_list_updates['%s'].append(" %(prop_name))
                write(gen_file, "                ('delete', None, elem_position))")
                write(gen_file, "    #end del_%s" %(prop_name))

            # Atomic Setters for properties that are maps
            for prop in ident.getProperties():
                if not prop.isMap():
                    continue
                prop_name = prop.getName().replace('-', '_')
                write(gen_file, "    def add_%s(self, elem):" %(prop_name))
                write(gen_file, '        """Add element to %s for %s.' %(prop.getName(), ident.getName()))
                write(gen_file, '        ')
                write(gen_file, '        :param elem: %s object' % (prop_type))
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        elem_position = getattr(elem, '%s')" %(prop.getMapKeyName()))
                write(gen_file, "        if '%s' not in self._pending_field_map_updates:" %(prop_name))
                write(gen_file, "            self._pending_field_map_updates['%s'] = [" %(prop_name))
                write(gen_file, "                ('set', elem, elem_position)]")
                write(gen_file, "        else:")
                write(gen_file, "            self._pending_field_map_updates['%s'].append(" %(prop_name))
                write(gen_file, "                ('set', elem, elem_position))")
                write(gen_file, "    #end set_%s" %(prop_name))
                write(gen_file, "")
                write(gen_file, "    def del_%s(self, elem_position):" %(prop_name))
                write(gen_file, '        """Delete element from %s for %s.' %(prop.getName(), ident.getName()))
                write(gen_file, '        ')
                write(gen_file, '        :param elem_position: string indicating map-key')
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        if '%s' not in self._pending_field_map_updates:" %(prop_name))
                write(gen_file, "            self._pending_field_map_updates['%s'] = [" %(prop_name))
                write(gen_file, "                ('delete', None, elem_position)]")
                write(gen_file, "        else:")
                write(gen_file, "            self._pending_field_map_updates['%s'].append(" %(prop_name))
                write(gen_file, "                ('delete', None, elem_position))")
                write(gen_file, "    #end del_%s" %(prop_name))

            # Setters for references
            for link_info in ident.getLinksInfo():
                link = ident.getLink(link_info)
                to_ident = ident.getLinkTo(link_info)
                to_name = to_ident.getName().replace('-', '_')
                is_ref = ident.isLinkRef(link_info)
                if not is_ref:
                    continue
                write(gen_file, "    def set_%s(self, *args, **kwargs):" %(to_name))
                write(gen_file, '        """Set %s for %s.' %(to_ident.getName(), ident.getName()))
                write(gen_file, '        ')
                write(gen_file, '        :param ref_obj: %s object' %(CamelCase(to_ident.getName())))
                if link.getXsdType():
                    write(gen_file, '        :param ref_data: %s object' %(link.getXsdType()))
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        self._pending_field_updates.add('%s_refs')" %(to_name))
                write(gen_file, "        self._pending_ref_updates.discard('%s_refs')" %(to_name))
                write(gen_file, "        super(%s, self).set_%s(*args, **kwargs)" %(class_name, to_name))
                write(gen_file, "")
                write(gen_file, "    #end set_%s" %(to_name))
                write(gen_file, "")
                write(gen_file, "    def add_%s(self, *args, **kwargs):" %(to_name))
                write(gen_file, '        """Add %s to %s.' %(to_ident.getName(), ident.getName()))
                write(gen_file, '        ')
                write(gen_file, '        :param ref_obj: %s object' %(CamelCase(to_ident.getName())))
                if link.getXsdType():
                    write(gen_file, '        :param ref_data: %s object' %(link.getXsdType()))
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        if '%s_refs' not in self._pending_ref_updates|self._pending_field_updates:" %(to_name))
                write(gen_file, "            self._pending_ref_updates.add('%s_refs')" %(to_name))
                write(gen_file, "            self._original_%s_refs = (self.get_%s_refs() or [])[:]" %(to_name, to_name))
                write(gen_file, "        super(%s, self).add_%s(*args, **kwargs)" %(class_name, to_name))
                write(gen_file, "    #end add_%s" %(to_name))
                write(gen_file, "")
                write(gen_file, "    def del_%s(self, *args, **kwargs):" %(to_name))
                write(gen_file, "        if '%s_refs' not in self._pending_ref_updates:" %(to_name))
                write(gen_file, "            self._pending_ref_updates.add('%s_refs')" %(to_name))
                write(gen_file, "            self._original_%s_refs = (self.get_%s_refs() or [])[:]" %(to_name, to_name))
                write(gen_file, "        super(%s, self).del_%s(*args, **kwargs)" %(class_name, to_name))
                write(gen_file, "    #end del_%s" %(to_name))
                write(gen_file, "")
                write(gen_file, "    def set_%s_list(self, *args, **kwargs):" %(to_name))
                write(gen_file, '        """Set %s list for %s.' %(to_ident.getName(), ident.getName()))
                write(gen_file, '        ')
                write(gen_file, '        :param ref_obj_list: list of %s object' %(CamelCase(to_ident.getName())))
                if link.getXsdType():
                    write(gen_file, '        :param ref_data_list: list of %s summary' %(link.getXsdType()))
                write(gen_file, '        ')
                write(gen_file, '        """')
                write(gen_file, "        self._pending_field_updates.add('%s_refs')" %(to_name))
                write(gen_file, "        self._pending_ref_updates.discard('%s_refs')" %(to_name))
                write(gen_file, "        super(%s, self).set_%s_list(*args, **kwargs)" %(class_name, to_name))
                write(gen_file, "    #end set_%s_list" %(to_name))
                write(gen_file, "")

            # Getters for children links
            for child_ident in ident.getChildren():
                child_name = child_ident.getName()
                child_method_name = child_name.replace('-', '_')
                write(gen_file, "    def get_%ss(self):" %(child_method_name))
                write(gen_file, "        children = super(%s, self).get_%ss()" %(class_name, child_method_name))
                write(gen_file, "        if not children: # read it for first time")
                write(gen_file, "            # if object not created/read from lib can't service")
                write(gen_file, "            svr_conn = self._server_conn")
                write(gen_file, "            if not svr_conn:")
                write(gen_file, "                return None")
                write(gen_file, "")
                write(gen_file, "            obj = svr_conn.%s_read(id = self.uuid, fields = ['%ss'])" %(method_name, child_method_name))
                write(gen_file, "            children = getattr(obj, '%ss', None)" %(child_method_name))
                write(gen_file, "            self.%ss = children" %(child_method_name))
                write(gen_file, "")
                write(gen_file, "        return children")
                write(gen_file, "    #end get_%ss" %(child_method_name))
                write(gen_file, "")
            write(gen_file, "")

            # Getters for back reference links
            for back_link_info in ident.getBackLinksInfo():
                if not ident.isLinkRef(back_link_info):
                    continue
                from_ident = ident.getBackLinkFrom(back_link_info)
                from_name = from_ident.getName().replace('-', '_')
                write(gen_file, "    def get_%s_back_refs(self):" %(from_name))
                write(gen_file, '        """Return list of all %ss using this %s"""' % (from_ident.getName(), ident.getName()))
                write(gen_file, "        back_refs = super(%s, self).get_%s_back_refs()" %(class_name, from_name))
                write(gen_file, "        if back_refs:")
                write(gen_file, "            return back_refs")
                write(gen_file, "        # if object not created/read from lib can't service")
                write(gen_file, "        svr_conn = self._server_conn")
                write(gen_file, "        if not svr_conn:")
                write(gen_file, "            return None")
                write(gen_file, "")
                write(gen_file, "        obj = svr_conn.%s_read(id = self.uuid, fields = ['%s_back_refs'])" %(method_name, from_name))
                write(gen_file, "        back_refs = getattr(obj, '%s_back_refs', None)" %(from_name))
                write(gen_file, "        self.%s_back_refs = back_refs" %(from_name))
                write(gen_file, "")
                write(gen_file, "        return back_refs")
                write(gen_file, "    #end get_%s_back_refs" %(from_name))
                write(gen_file, "")

            write(gen_file, "#end class %s" %(class_name))
            write(gen_file, "")
    #end _generate_client_classes

    def _create_heat_template_params(self, prop_list):
        # print parameters
        for key,val in enumerate(prop_list):
            if not val['prop_list']:
                prop_long_name = self._get_prop_long_name(val)
                write(self.gen_file_templ, "  %s:" %(prop_long_name))
                prop_type = self._get_heat_prop_type(val['prop_type'], 
                                                     val['prop_is_array'])
                prop_type = self._convert_heat_template_type(prop_type)
                write(self.gen_file_templ, "    type: %s" %(prop_type).lower())
                write(self.gen_file_templ, "    description: %s for the %s"
                    %(val['prop_name'], self.resource_dict['class']))
                continue
            self._create_heat_template_params(val['prop_list'])
    #end _create_heat_template_params

    def _create_heat_template_resources(self, prop_list, tabs, comma):
        # print resources
        tcomma = comma
        for key,val in enumerate(prop_list):
            prop_type = self._get_heat_prop_type(val['prop_type'],
                                                 val['prop_is_array'])
            if not val['prop_list']:
                prop_long_name = self._get_prop_long_name(val)
                if prop_type.startswith('LIST'):
                    write(self.gen_file_templ, "%s%s: [{ get_param: %s }]%s"
                        %(" "*tabs, prop_long_name, prop_long_name, tcomma))
                else:
                    write(self.gen_file_templ, "%s%s: { get_param: %s }%s"
                        %(" "*tabs, prop_long_name, prop_long_name, tcomma))
                continue
            prop_long_name = self._get_prop_long_name(val)
            write(self.gen_file_templ, "%s%s:" %(" "*tabs, prop_long_name))
            if prop_type.startswith("LIST"):
                tabs = tabs+2
                write(self.gen_file_templ, "%s[{" %(" "*tabs))
                comma = ","
            if prop_type == "MAP":
                tabs = tabs+2
                write(self.gen_file_templ, "%s{" %(" "*tabs))
                comma = ","
            self._create_heat_template_resources(val['prop_list'], tabs+2, comma)
            if prop_type == "MAP":
                write(self.gen_file_templ, "%s}%s" %(" "*tabs, tcomma))
                tabs = tabs-2
            if prop_type.startswith("LIST"):
                write(self.gen_file_templ, "%s}]%s" %(" "*tabs, tcomma))
                tabs = tabs-2
                comma = ""
    #end _create_heat_template_resources

    def _create_heat_env_params(self, prop_list):
        # print env parameters
        for key,val in enumerate(prop_list):
            prop_type = self._get_heat_prop_type(val['prop_type'], 0)
            if not val['prop_list']:
                if not val['prop_restr']:
                    prop_long_name = self._get_prop_long_name(val)
                    if prop_type == 'INTEGER':
                        write(self.gen_file_env, "  %s: %s" %(prop_long_name, 1))
                    elif prop_type == 'BOOLEAN':
                        write(self.gen_file_env, "  %s: %s" %(prop_long_name, 'True'))
                    elif prop_type == 'STRING':
                        write(self.gen_file_env, "  %s: '%s'" %(prop_long_name, "Something"))
                    continue
                prop_long_name = self._get_prop_long_name(val)
                if prop_type == 'INTEGER' or prop_type == 'BOOLEAN':
                    write(self.gen_file_env, "  %s: %s" %(prop_long_name, val['prop_restr'][0]))
                elif prop_type == 'STRING':
                    write(self.gen_file_env, "  %s: '%s'" %(prop_long_name, val['prop_restr'][0]))
            self._create_heat_env_params(val['prop_list'])
    #end _create_heat_template_params

    def _get_heat_prop_type(self, typename, is_array):
        if typename.lower().endswith(
            "integer") or typename.lower().endswith("time"):
            type = "INTEGER"
        elif typename.lower().endswith("string"):
            type = "STRING"
        elif typename.lower().endswith("boolean"):
            type = "BOOLEAN"
        elif typename.lower().endswith("list<string>"):
            type = "LIST"
        else:
            type = "MAP"

        if is_array:
            type = "LIST:" + type

        return type
    #end _get_heat_prop_type

    def _convert_heat_template_type(self, prop_type):
        if prop_type == "INTEGER" or prop_type == "LIST:INTEGER":
            return "number"
        if prop_type == "STRING" or prop_type == "LIST:STRING":
            return "string"
        if prop_type == "BOOLEAN" or prop_type == "LIST:BOOLEAN":
            return "boolean"
        return prop_type

    def _make_heat_prop_list(self, prop_list, prop_name, prop_type,
                             restrictions, is_array, prop_get_list,
                             skip):
        is_list = False
        if self._get_heat_prop_type(prop_type, is_array).startswith('LIST'):
            is_list = True
        new_list = []
        prop_list.append({
            'prop_name': prop_name,
            'prop_type': prop_type,
            'prop_restr': restrictions,
            'prop_is_array': is_array,
            'prop_list' : new_list,
            'prop_get_list' : prop_get_list,
            'prop_skip': skip,
            'prop_is_list': is_list,
        })
        return prop_list[-1]
    #end _make_heat_prop_list

    def _process_heat_complex_property(self, cls, prop_list, prop_name,
                                       prop_type, is_simple, is_array,
                                       prop_get_list):
        prop = self._make_heat_prop_list(prop_list, prop_name, prop_type,
                                         None, is_array, prop_get_list, False)
        new_list = prop['prop_list']
        new_prop_get_list = list(prop_get_list)
        new_prop_get_list.append(prop)
        for attr_name in cls.attr_fields:
            attr_is_complex = cls.attr_field_type_vals[attr_name]['is_complex']
            attr_type = cls.attr_field_type_vals[attr_name]['attr_type']
            attr_is_array = cls.attr_field_type_vals[attr_name]['is_array']
            attr_restrictions = cls.attr_field_type_vals[
                attr_name]['restrictions']

            if not attr_is_complex:
                self._make_heat_prop_list(new_list, attr_name,
                                          attr_type, attr_restrictions,
                                          attr_is_array, new_prop_get_list,
                                          False)
                continue

            # property type is complex
            new_cls = getattr(self.res_xsd, attr_type)
            self._process_heat_complex_property(new_cls, new_list, attr_name,
                attr_type, (not attr_is_complex), attr_is_array,
                new_prop_get_list)
    #end _process_heat_complex_property

    def _make_heat_property_schema(self, val, tabs):
        prop_long_name = self._get_prop_long_name(val)
        write(self.gen_file, "%s%s: properties.Schema(" %(tabs*" ",
            prop_long_name.upper()))
        tabs = tabs+4
        prop_type = self._get_heat_prop_type(val['prop_type'],
                                             val['prop_is_array'])
        if prop_type.startswith('LIST'):
            prop_type = "LIST"
        write(self.gen_file, "%sproperties.Schema.%s," %(tabs*" ", prop_type))
        write(self.gen_file, "%s_('%s.')," %(tabs*" ",
            prop_long_name.upper()))
        write(self.gen_file, "%supdate_allowed=True," %(tabs*" "))
        write(self.gen_file, "%srequired=False," %(tabs*" "))
        if val['prop_restr']:
            write(self.gen_file, "%sconstraints=[" %(tabs*" "))
            if prop_type == "INTEGER":
                write(self.gen_file, "%s    constraints.Range(%s, %s),"
                    %(tabs*" ", val['prop_restr'][0], val['prop_restr'][1]))
            else:
                write(self.gen_file, "%s    constraints.AllowedValues(%s),"
                    %(tabs*" ", val['prop_restr']))
            write(self.gen_file, "%s]," %(tabs*" "))
        if val['prop_list']:
            if prop_type == 'LIST':
                write(self.gen_file, "%sschema=properties.Schema(" %(tabs*" "))
                tabs=tabs+4
                write(self.gen_file, "%sproperties.Schema.MAP," %(tabs*" "))
            write(self.gen_file, "%sschema={" %(tabs*" "))
            for key,value in enumerate(val['prop_list']):
                self._make_heat_property_schema(value, tabs+4)
            write(self.gen_file, "%s}" %(tabs*" "))
            if prop_type == 'LIST':
                tabs=tabs-4
                write(self.gen_file, "%s)" %(tabs*" "))
        tabs = tabs-4
        write(self.gen_file, "%s)," %(tabs*" "))
    #end _make_heat_property_schema

    def _make_heat_properties(self, prop_list, prop_names_list,
                              prop_names_uc_list):
        for key,val in enumerate(prop_list):
            prop_long_name = self._get_prop_long_name(val)
            prop_names_list.append("'"+prop_long_name.lower()+"'")
            prop_names_uc_list.append(prop_long_name.upper())
            if val['prop_list']:
                self._make_heat_properties(val['prop_list'], prop_names_list,
                                           prop_names_uc_list)
    #end _make_heat_properties

    def _get_prop_hierarchy(self, prop, print_index):
        if self.heat_handling == 0:
            prop_get_str = "self.properties"
        else:
            prop_get_str = "prop_diff"
        for key,value in enumerate(prop['prop_get_list']):
            if value['prop_name'].lower().endswith("ref_data"):
                continue
            idx_str = ""
            if value['prop_is_list']:
                idx_str = "[index_%s]" %(len(value['prop_get_list']))
            prop_long_name = self._get_prop_long_name(value)
            prop_get_str += ".get(self.%s, {})%s" %(prop_long_name.upper(), idx_str)
        idx_str = ""
        if prop['prop_is_list'] and not prop['prop_list'] and print_index:
            idx_str = "[index_%s]" %(len(prop['prop_get_list']))
        prop_long_name = self._get_prop_long_name(prop)
        prop_get_str += ".get(self.%s)%s" %(prop_long_name.upper(), idx_str)
        return prop_get_str
    #end _get_prop_hierarchy

    def _get_prop_long_name(self, prop):
        prop_get_str = ""
        for key,value in enumerate(prop['prop_get_list']):
            if value['prop_name'].lower().endswith("ref_data"):
                continue
            prop_get_str += "%s_" %(value['prop_name'])
        prop_get_str += "%s" %(prop['prop_name'])
        return prop_get_str
    #end _get_prop_long_name

    def _set_heat_properties_value(self, prop, tabs, obj_index, skip):
        if prop['prop_name'].endswith("_refs"):
            return
        write(self.gen_file, "%sif %s is not None:" %(tabs*" ",
            self._get_prop_hierarchy(prop, False)))
        tabs=tabs+4
        prop_type = self._get_heat_prop_type(prop['prop_type'],
                                             prop['prop_is_array'])
        if prop_type.startswith('LIST'):
            write(self.gen_file, "%sfor index_%s in range(len(%s)):" %(tabs*" ",
                len(prop['prop_get_list']), self._get_prop_hierarchy(prop, False)))
            tabs=tabs+4
        if not prop['prop_list']:
            oper_str = "add" if prop['prop_is_list'] else "set"
            write(self.gen_file, "%sobj_%s.%s_%s(%s)"
                %(" "*tabs, obj_index, oper_str, prop['prop_name'], self._get_prop_hierarchy(prop, True)))
            return

        prop_name = prop['prop_name']
        prop_type = prop['prop_type']
        write(self.gen_file, "%sobj_%s = vnc_api.%s()" %(tabs*" ", obj_index+1, prop_type))

        for key,val in enumerate(prop['prop_list']):
            self._set_heat_properties_value(val, tabs, obj_index+1, 0)

        if not skip:
            oper_str = "add" if prop['prop_is_list'] else "set"
            write(self.gen_file, "%sobj_%s.%s_%s(obj_%s)" %(tabs*" ", obj_index, oper_str, prop['prop_name'], obj_index+1))
    #end _set_heat_properties_value

    def _get_heat_properties_value(self, prop, p_prop_name):
        if not prop['prop_list']:
            write(self.gen_file, "            '%s': obj.%s,"
                %(prop['prop_name'], p_prop_name))
            return

        for key,val in enumerate(prop['prop_list']):
            self._get_heat_properties_value(
                val, p_prop_name+".get_"+val['prop_name']+"()")
    #end _get_heat_properties_value

    def _gen_heat_common_resource_hdr(self):
        write(self.gen_file, "")
        write(self.gen_file, "# AUTO-GENERATED file from %s. Do Not Edit!" \
              %(self.__class__.__name__))
        write(self.gen_file, "")
        write(self.gen_file, "from contrail_heat.resources import contrail")
        write(self.gen_file, "try:")
        write(self.gen_file, "    from heat.common.i18n import _")
        write(self.gen_file, "except ImportError:")
        write(self.gen_file, "    pass")
        write(self.gen_file, "from heat.engine import constraints")
        write(self.gen_file, "from heat.engine import properties")
        write(self.gen_file, "try:")
        write(self.gen_file, "    from heat.openstack.common import log as logging")
        write(self.gen_file, "except ImportError:")
        write(self.gen_file, "    from oslo_log import log as logging")
        write(self.gen_file, "import uuid")
        write(self.gen_file, "")
        write(self.gen_file, "from vnc_api import vnc_api")
        write(self.gen_file, "")
        write(self.gen_file, "LOG = logging.getLogger(__name__)")
        write(self.gen_file, "")
        write(self.gen_file, "")
        write(self.gen_file, "class Contrail%s(contrail.ContrailResource):" \
              %(self.resource_dict['class']))
    #end _gen_heat_common_resource_hdr

    def _build_heat_properties(self):
        for prop_name in self.cls.prop_fields:
            if prop_name in self.skip_list:
                continue
            prop_is_simple = self.cls.prop_field_types[prop_name][0]
            prop_type = self.cls.prop_field_types[prop_name][1]
            if prop_is_simple:
                self._make_heat_prop_list(self.prop_list, prop_name,
                                          prop_type, None, False, [], False)
                continue

            # complex object
            try:
                cls = getattr(self.res_xsd, prop_type)
            except:
                continue
            self._process_heat_complex_property(cls, self.prop_list,
                prop_name, prop_type, prop_is_simple, False, [])
     #end _build_heat_properties

    def _build_heat_refs(self):
        for ref_name in self.cls.ref_fields:

            ref_type = self.cls.ref_field_types[ref_name][1]
            skip = False if ref_type is 'None' else True
            self._make_heat_prop_list(self.ref_list, ref_name, 'string',
                                      None, False, [], skip)
            ref_name = self.cls.ref_field_types[ref_name][0].replace("-", "_")
            ref_name = ref_name + "_refs_data"
            try:
                cls = getattr(self.res_xsd, ref_type)
            except:
                continue

            self._process_heat_complex_property(cls, self.ref_list,
                ref_name, ref_type, False, False, [])
     #end _build_heat_refs

    def _build_heat_parents(self):
        for parent_name in self.cls.parent_types:
            self._make_heat_prop_list(self.parent_list,
                self._uncamelize(parent_name), 'string',
                None, False, [], False)
     #end _build_heat_parents

    def _gen_heat_properties(self, prop_names_list, prop_names_uc_list):
        write(self.gen_file, "    PROPERTIES = (")
        write(self.gen_file, "        %s" %(", ".join(prop_names_uc_list)))
        write(self.gen_file, "    ) = (")
        write(self.gen_file, "        %s" %(", ".join(prop_names_list)))
        write(self.gen_file, "    )")
        write(self.gen_file, "")
    #end _gen_heat_properties

    def _gen_heat_templ_params(self):
        write(self.gen_file_templ, "heat_template_version: 2015-04-30")
        write(self.gen_file_templ, "")
        write(self.gen_file_templ, "description: >")
        write(self.gen_file_templ, "  HOT template to create a %s:"
            %(self.resource_dict['class']))
        write(self.gen_file_templ, "")
        write(self.gen_file_templ, "parameters:")
        self._create_heat_template_params(self.prop_list)
        self._create_heat_template_params(self.ref_list)
        self._create_heat_template_params(self.parent_list)
        write(self.gen_file_templ, "")
    #end _gen_heat_templ_params

    def _gen_heat_env_params(self):
        write(self.gen_file_env, "parameters:")
        self._create_heat_env_params(self.prop_list)
        self._create_heat_env_params(self.ref_list)
        self._create_heat_env_params(self.parent_list)
        write(self.gen_file_env, "")
    #end _gen_heat_templ_params

    def _gen_heat_properties_schema(self):
        tabs = 4
        write(self.gen_file, "    properties_schema = {")
        for key,val in enumerate(self.prop_list):
            self._make_heat_property_schema(val, tabs+4)
        for key,val in enumerate(self.ref_list):
            self._make_heat_property_schema(val, tabs+4)
        for key,val in enumerate(self.parent_list):
            self._make_heat_property_schema(val, tabs+4)
        write(self.gen_file, "    }")
        write(self.gen_file, "")

        write(self.gen_file, "    attributes_schema = {")
        for key,val in enumerate(self.prop_list):
            prop_long_name = self._get_prop_long_name(val)
            write(self.gen_file, "        \"%s\":_(\"%s\")," %(prop_long_name, prop_long_name))
        for key,val in enumerate(self.ref_list):
            prop_long_name = self._get_prop_long_name(val)
            write(self.gen_file, "        \"%s\":_(\"%s\")," %(prop_long_name, prop_long_name))
        for key,val in enumerate(self.parent_list):
            prop_long_name = self._get_prop_long_name(val)
            write(self.gen_file, "        \"%s\":_(\"%s\")," %(prop_long_name, prop_long_name))
        write(self.gen_file, "        \"show\": _(\"All attributes.\"),")
        write(self.gen_file, "    }")
        write(self.gen_file, "")
        write(self.gen_file, "    update_allowed_keys = ('Properties',)")
        write(self.gen_file, "")

    #end _gen_heat_properties_schema

    def _ref_create_handling(self):
        tabs = 8
        write(self.gen_file, "")
        for key,val in enumerate(self.ref_list):
            if val['prop_skip']:
                continue
            attr_str = ""
            ref_name = val['prop_name']
            if '_refs_data' in ref_name:
                ref_name = val['prop_name'].replace("_refs_data","")
                attr_str = ', obj_1'
            if not ref_name.endswith('_refs'):
                ref_name = ref_name+"_refs"
            ref_name_type = ref_name.replace("_","-")
            ref_name_type = ref_name.replace("_","-").replace("-refs", "")

            write(self.gen_file, "%s# reference to %s" %(" "*tabs, ref_name))
            if attr_str:
                write(self.gen_file, "%sobj_1 = None" %(" "*tabs))
                self._set_heat_properties_value(val, tabs, 0, 1)
                write(self.gen_file, "")

            write(self.gen_file, "%sif self.properties.get(self.%s):" %(" "*tabs, ref_name.upper()))
            tabs = tabs+4
            write(self.gen_file, "%stry:" %(" "*tabs))
            tabs = tabs+4
            write(self.gen_file, "%sref_obj = self.vnc_lib().%s_read(" %(" "*tabs, ref_name.replace("_refs", "")))
            tabs = tabs+4
            write(self.gen_file, "%sid=self.properties.get(self.%s)" %(" "*tabs, ref_name.upper()))
            tabs = tabs-4
            write(self.gen_file, "%s)" %(" "*tabs))
            tabs = tabs-4
            write(self.gen_file, "%sexcept vnc_api.NoIdError:" %(" "*tabs))
            tabs = tabs+4
            write(self.gen_file, "%sref_obj = self.vnc_lib().%s_read(" %(" "*tabs, ref_name.replace("_refs", "")))
            tabs = tabs+4
            write(self.gen_file, "%sfq_name_str=self.properties.get(self.%s)" %(" "*tabs, ref_name.upper()))
            tabs = tabs-4
            write(self.gen_file, "%s)" %(" "*tabs))
            tabs = tabs-4
            write(self.gen_file, "%sobj_0.add_%s(ref_obj%s)" %(" "*tabs, ref_name.replace("_refs", ""), attr_str))
	    write(self.gen_file, "")
            tabs = tabs-4
    # _ref_create_handling

    def _ref_modify_handling(self):
        for key,val in enumerate(self.ref_list):
            if val['prop_skip']:
                continue
            ref_name = val['prop_name'].replace("_refs_data","")
            ref_name_type = ref_name.replace("_","-")

            tabs = 8
            write(self.gen_file, "%s# reference to %s" %(" "*tabs, ref_name))
            write(self.gen_file, "%sobj_1 = None" %(" "*tabs))
            self._set_heat_properties_value(val, tabs, 0, 1)

            if not ref_name.endswith('_refs'):
                ref_name = ref_name+"_refs"
            write(self.gen_file, "%sif prop_diff.get(self.%s):" %(" "*tabs, ref_name.upper()))
            tabs = tabs+4
            write(self.gen_file, "%stry:" %(" "*tabs))
            tabs = tabs+4
            write(self.gen_file, "%sref_obj = self.vnc_lib().%s_read(" %(" "*tabs, ref_name.replace("_refs", "")))
            tabs = tabs+4
            write(self.gen_file, "%sid=prop_diff.get(self.%s)" %(" "*tabs, ref_name.upper()))
            tabs = tabs-4
            write(self.gen_file, "%s)" %(" "*tabs))
            tabs = tabs-4
            write(self.gen_file, "%sexcept:" %(" "*tabs))
            tabs = tabs+4
            write(self.gen_file, "%sref_obj = self.vnc_lib().%s_read(" %(" "*tabs, ref_name.replace("_refs", "")))
            tabs = tabs+4
            write(self.gen_file, "%sfq_name_str=prop_diff.get(self.%s)" %(" "*tabs, ref_name.upper()))
            tabs = tabs-4
            write(self.gen_file, "%s)" %(" "*tabs))
            tabs = tabs-4

            write(self.gen_file, "%sself.vnc_lib().ref_update("
                %(" "*tabs))
            tabs = tabs+4
            write(self.gen_file, "%s\'%s\', obj_0.uuid," %(" "*tabs, self.resource_dict['method']))
            write(self.gen_file, "%s\'%s\', ref_obj.uuid," %(" "*tabs, ref_name_type.replace("-refs", "")))
            write(self.gen_file, "%sref_obj.fq_name, \'ADD\', obj_1" %(" "*(tabs)))
            tabs = tabs-4
            write(self.gen_file, "%s)" %(" "*tabs))

            tabs = tabs-4
            write(self.gen_file, "%s# End: reference to %s" %(" "*tabs, ref_name))
            write(self.gen_file, "")

    def _gen_heat_handle_create(self):
        write(self.gen_file, "    def handle_create(self):")
        if self.parent_list:
            parent_is_project = False
            tabs = 8
            write(self.gen_file, "%sparent_obj = None" %(" "*tabs))
            for key,val in enumerate(self.parent_list):
                if val['prop_name'].upper() == "PROJECT":
                    parent_is_project = True
                write(self.gen_file, "%sif parent_obj is None and self.properties.get(self.%s):" %(" "*tabs, val['prop_name'].upper()))
                tabs = tabs+4
                write(self.gen_file, "%stry:" %(" "*tabs))
                tabs = tabs+4
                write(self.gen_file, "%sparent_obj = self.vnc_lib().%s_read(id=self.properties.get(self.%s))"
                    %(" "*tabs, self._uncamelize(val['prop_name']), val['prop_name'].upper()))
                tabs = tabs-4
                write(self.gen_file, "%sexcept vnc_api.NoIdError:" %(" "*tabs))
                tabs = tabs+4
                write(self.gen_file, "%sparent_obj = self.vnc_lib().%s_read(fq_name_str=self.properties.get(self.%s))"
                    %(" "*tabs, self._uncamelize(val['prop_name']), val['prop_name'].upper()))
                tabs = tabs-4
                write(self.gen_file, "%sexcept:" %(" "*tabs))
                tabs = tabs+4
                write(self.gen_file, "%sparent_obj = None" %(" "*tabs))
                tabs = tabs-4
                tabs = tabs-4
            write(self.gen_file, "")
            tabs = 8
            if parent_is_project:
                write(self.gen_file, "%sif parent_obj is None:" %(" "*tabs))
                tabs = tabs+4
                write(self.gen_file, "%stenant_id = self.stack.context.tenant_id" %(" "*tabs))
                write(self.gen_file, "%sparent_obj = self.vnc_lib().project_read(id=str(uuid.UUID(tenant_id)))" %(" "*tabs))
                tabs = tabs-4
                write(self.gen_file, "")
            write(self.gen_file, "%sif parent_obj is None:" %(" "*tabs))
            write(self.gen_file, "%s    raise Exception('Error: parent is not specified in template!')" %(" "*tabs))
            write(self.gen_file, "")
            write(self.gen_file, "        obj_0 = vnc_api.%s(name=self.properties[self.NAME],"
                %(self.resource_dict['class']))
            write(self.gen_file, "            parent_obj=parent_obj)")
        else:
            write(self.gen_file, "        obj_0 = vnc_api.%s(name=self.properties[self.NAME])"
                %(self.resource_dict['class']))
        write(self.gen_file, "")

        for key,val in enumerate(self.prop_list):
            if val['prop_skip']:
                continue
            tabs = 8
            self._set_heat_properties_value(val, tabs, 0, 0)

        # reference object handling
        self._ref_create_handling()

        tabs = 8
        write(self.gen_file, "%stry:" %(" "*tabs))
        tabs = tabs+4
        write(self.gen_file, "%sobj_uuid = super(Contrail%s, self).resource_create(obj_0)"
            %(" "*tabs, self.resource_dict['class']))
        tabs = tabs-4
        write(self.gen_file, "%sexcept:" %(" "*tabs))
        tabs = tabs+4
        write(self.gen_file, "%sraise Exception(_('%s %%s could not be updated.') %% self.name)" %(" "*tabs, self.resource_name))
        tabs = tabs-4
        write(self.gen_file, "")
        write(self.gen_file, "%sself.resource_id_set(obj_uuid)" %(" "*tabs))
        write(self.gen_file, "")
    #end _gen_heat_handle_create

    def _gen_heat_handle_update(self):
        tabs = 4
        write(self.gen_file, "%sdef handle_update(self, json_snippet, tmpl_diff, prop_diff):" %(" "*tabs))
        tabs = tabs+4
        write(self.gen_file, "%stry:" %(" "*tabs))
        tabs = tabs+4
        write(self.gen_file, "%sobj_0 = self.vnc_lib().%s_read(" %(" "*tabs, self.resource_dict['method']))
        tabs = tabs+4
        write(self.gen_file, "%sid=self.resource_id" %(" "*tabs))
        tabs = tabs-4
        write(self.gen_file, "%s)" %(" "*tabs))
        tabs = tabs-4
        write(self.gen_file, "%sexcept:" %(" "*tabs))
        tabs = tabs+4
        write(self.gen_file, "%sraise Exception(_('%s %%s not found.') %% self.name)" %(" "*tabs, self.resource_name))
        write(self.gen_file, "")

        for key,val in enumerate(self.prop_list):
            if val['prop_skip']:
                continue
            tabs = 8
            self._set_heat_properties_value(val, tabs, 0, 0)

        write(self.gen_file, "")

        tabs = 8
        write(self.gen_file, "%stry:" %(" "*tabs))
        tabs = tabs+4
        write(self.gen_file, "%sself.vnc_lib().%s_update(obj_0)"
            %(" "*tabs, self.resource_dict['method']))
        tabs = tabs-4
        write(self.gen_file, "%sexcept:" %(" "*tabs))
        tabs = tabs+4
        write(self.gen_file, "%sraise Exception(_('%s %%s could not be updated.') %% self.name)" %(" "*tabs, self.resource_name))
        write(self.gen_file, "")

        # reference object handling
        self._ref_modify_handling()
    #end _gen_heat_handle_update

    def _gen_heat_handle_delete(self):
        write(self.gen_file, "    def handle_delete(self):")
        write(self.gen_file, "        if self.resource_id is None:")
        write(self.gen_file, "            return")
        write(self.gen_file, "")
        write(self.gen_file, "        try:")
        write(self.gen_file, "            self.vnc_lib().%s_delete(id=self.resource_id)"
            %(self.resource_dict['method']))
        write(self.gen_file, "        except Exception as ex:")
        write(self.gen_file, "            self._ignore_not_found(ex)")
        write(self.gen_file, "            LOG.warn(_('%s %%s already deleted.') %% self.name)"
            %(self.resource_dict['method']))
        write(self.gen_file, "")
    #end _gen_heat_handle_delete

    def _gen_heat_show_resource(self):
        write(self.gen_file, "    def _show_resource(self):")
        write(self.gen_file, "        obj = self.vnc_lib().%s_read(id=self.resource_id)"
            %(self.resource_dict['method']))
        write(self.gen_file, "        obj_dict = obj.serialize_to_json()")
        write(self.gen_file, "        return obj_dict")
        write(self.gen_file, "")
        write(self.gen_file, "")
    #end _gen_heat_show_resource

    def _gen_heat_resource_mapping(self):
        class_name = self.resource_dict['class']
        write(self.gen_file, "def resource_mapping():")
        write(self.gen_file, "    return {")
        write(self.gen_file, "        'OS::Contrail::%s': Contrail%s," %(class_name, class_name))
        write(self.gen_file, "    }")
    #end _gen_heat_resource_mapping

    def _gen_heat_templ_resource_section(self):
        # generate template resource section
        write(self.gen_file_templ, "resources:")
        write(self.gen_file_templ, "  template_%s:"
            %(self.resource_dict['class']))
        write(self.gen_file_templ, "    type: OS::Contrail::%s"
            %(self.resource_dict['class']))
        write(self.gen_file_templ, "    properties:")
        self._create_heat_template_resources(self.prop_list, 6, "")
        self._create_heat_template_resources(self.ref_list, 6, "")
        self._create_heat_template_resources(self.parent_list, 6, "")
        write(self.gen_file_templ, "")
    #end _gen_heat_templ_resource_section

    def _uncamelize(self, name):
        s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

    def _generate_heat_resources(self, gen_filepath_pfx, gen_filename_pfx):
        # heat uses the generated code to build its resources
        # set the build path correctly and import resources
        heat_path = os.environ.get('HEAT_BUILDTOP') + '/api-lib/vnc_api/gen'
        sys.path.append(heat_path)
        self.res_cmn = importlib.import_module('resource_common')
        self.res_xsd = importlib.import_module('resource_xsd')

        # list of attributes we can skip
        self.skip_list = ["id_perms", "perms2"]
        #self.ref_special_handling_list = {}
        #self.ref_special_handling_list['virtual-machine-interface'] = 'virtual_network_refs'
        #self.ref_special_handling_list['instance-ip'] = 'virtual_network_refs'

        for ident in self._non_exclude_idents():
            #if ident.getName() != "virtual-machine-interface":
            #if ident.getName() != "network-policy":
            #if ident.getName() != "virtual-network":
            #if ident.getName() != "service-template":
            #    continue

            self.resource_name = ident.getName()
            class_name = CamelCase(ident.getName())
            self.cls = getattr(self.res_cmn, class_name)
            method_name = ident.getName().replace('-', '_')
            file_prefix = ident.getName().replace('-', '_')

            # resource file descriptor
            heat_resource_dir = heat_path + "/heat/resources/"
            if not os.path.exists(heat_resource_dir):
                os.makedirs(heat_resource_dir)
            self._generate_package(heat_resource_dir)
            self.gen_file = self._xsd_parser.makeFile(
                heat_resource_dir + file_prefix + "_heat.py")
            # template file descriptor
            heat_template_dir = heat_path + "/heat/template/"
            if not os.path.exists(heat_template_dir):
                os.makedirs(heat_template_dir)
            self._generate_package(heat_template_dir)
            self.gen_file_templ = self._xsd_parser.makeFile(
                heat_template_dir + file_prefix + "_heat.yaml")
            # env file descriptor
            heat_env_dir = heat_path + "/heat/env/"
            if not os.path.exists(heat_env_dir):
                os.makedirs(heat_env_dir)
            self._generate_package(heat_env_dir)
            self.gen_file_env = self._xsd_parser.makeFile(
                heat_env_dir + file_prefix + "_heat.env")

            heat_dir = heat_path + "/heat/"
            self._generate_package(heat_dir)

            self.resource_dict = {}
            self.prop_list = []
            self.resource_dict['class'] = class_name
            self.resource_dict['method'] = method_name
            self.resource_dict['props'] = self.prop_list

            # generate resource common header section
            self._gen_heat_common_resource_hdr()

            # name is by default
            self.prop_list.append({
                'prop_name': 'name',
                'prop_type': 'STRING',
                'prop_restr': None,
                'prop_is_array': False,
                'prop_list' : [],
                'prop_get_list' : [],
                'prop_skip': True
            })

            # fq_name is by default
            self.prop_list.append({
                'prop_name': 'fq_name',
                'prop_type': 'STRING',
                'prop_restr': None,
                'prop_is_array': False,
                'prop_list' : [],
                'prop_get_list' : [],
                'prop_skip': True
            })

            # build heat properties
            self._build_heat_properties()

            # build heat reference properties
            self.ref_list = []
            self._build_heat_refs()

            # build heat parents
            self.parent_list = []
            self._build_heat_parents()

            prop_names_list = []
            prop_names_uc_list = []
            self._make_heat_properties(self.prop_list, prop_names_list,
                                       prop_names_uc_list)
            self._make_heat_properties(self.ref_list, prop_names_list,
                                       prop_names_uc_list)
            self._make_heat_properties(self.parent_list, prop_names_list,
                                       prop_names_uc_list)

            # generate resource properties section
            self._gen_heat_properties(prop_names_list, prop_names_uc_list)

            # generate resource properties_schema section
            self._gen_heat_properties_schema()

            # generate resource handle_create method
            self.heat_handling = 0
            self._gen_heat_handle_create()

            # generate resource handle_update method
            self.heat_handling = 1
            self._gen_heat_handle_update()

            # generate resource handle_delete method
            self._gen_heat_handle_delete()

            # generate resource _show_resource method
            self._gen_heat_show_resource()

            # generate resource mapping
            self._gen_heat_resource_mapping()

            # generate template parameters section
            self._gen_heat_templ_params()

            # generate resource mapping
            self._gen_heat_templ_resource_section()

            # generate template parameters section
            self._gen_heat_env_params()
    #end _generate_heat_resources

    def _generate_test_classes(self, gen_filepath_pfx, gen_filename_pfx):
        gen_file = self._xsd_parser.makeFile(gen_filepath_pfx + "_test.py")
        write(gen_file, "'''")
        write(gen_file, "This module defines the fixture classes for all config elements")
        write(gen_file, "'''")
        write(gen_file, "")
        write(gen_file, "# AUTO-GENERATED file from %s. Do Not Edit!" \
              %(self.__class__.__name__))
        write(gen_file, "")
        write(gen_file, "import cfixture")
        write(gen_file, "from vnc_api import vnc_api")
        write(gen_file, "from cfgm_common.exceptions import *")
        write(gen_file, "")
        write(gen_file, "from generatedssuper import GeneratedsSuper")
        write(gen_file, "")

        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            if ident_name == _BASE_PARENT:
                continue

            method_name = ident_name.replace('-', '_')
            class_name = CamelCase(ident.getName())
            parents = ident.getParents()
            write(gen_file, "class %sTestFixtureGen(cfixture.ContrailFixture):" %(class_name))
            write(gen_file, '    """')
            write(gen_file, '    Fixture for :class:`.%s`' % class_name)
            write(gen_file, '    """')
            if parents:
                init_args = 'self, conn_drv, %s_name=None, parent_fixt=None, auto_prop_val=False' %(method_name)
                init_ds = '''
        constructor

        Args:
            conn_drv (:class:`ConnectionDriver`): connection driver (eg. :class:`vnc_api.vnc_api.VncApi`, :class:`novaclient.client.Client`, etc)

        Kwargs:
            %s_name (str): Name of %s
            parent_fixt (:class:`.%sTestFixtureGen`): Parent fixture
''' % (method_name, method_name, CamelCase(parents[0][0].getName())) # TODO fix this to handle multiple possible parents
            else:
                init_args = 'self, conn_drv, %s_name=None, auto_prop_val=False' %(method_name)
                init_ds = '''
        constructor

        Args:
            conn_drv (:class:`ConnectionDriver`): connection driver (eg. :class:`vnc_api.vnc_api.VncApi`, :class:`novaclient.client.Client`, etc)

        Kwargs:
            %s_name (str): Name of %s
'''
            for link_info in ident.getLinksInfo():
                if ident.isLinkRef(link_info):
                    l_name = ident.getLinkTo(link_info).getName().replace ('-', '_')
                    link = ident.getLink(link_info)
                    if link.getXsdType():
                        init_args += ', %s_ref_infos = None' % (l_name)
                        init_ds += '            %s (list): list of tuple (:class:`%s`, :class: `%s`) type\n' % (
                            l_name, CamelCase(l_name), link.getXsdType())
                    else:
                        init_args += ', %s_refs = None' % (l_name)
                        init_ds += '            %s (list): list of :class:`%s` type\n' % (
                            l_name, CamelCase(l_name))

            for prop in ident.getProperties():
                prop_name = prop.getName().replace('-', '_')
                ctype = prop._xelement.type
                init_args += ', %s=None' % (prop_name)
                init_ds += '            %s (instance): instance of :class:`%s`\n' % (
                            prop_name, ctype)

            write(gen_file, "    def __init__(%s):" %(init_args))
            write(gen_file, "        '''")
            write(gen_file, "        Create %sTestFixtureGen object" % class_name)
            write(gen_file, "        %s\n        '''" % init_ds)
            write(gen_file, "        super(%sTestFixtureGen, self).__init__()" %(class_name))
            write(gen_file, "        self._conn_drv = conn_drv")
            write(gen_file, "        if not %s_name:" %(method_name))
            write(gen_file, "            self._name = 'default-%s'" %(ident_name))
            write(gen_file, "        else:")
            write(gen_file, "            self._name = %s_name" %(method_name))
            write(gen_file, "        self._obj = None")
            if parents:
                write(gen_file, "        self._parent_fixt = parent_fixt")
            write(gen_file, "        self._auto_prop_val = auto_prop_val")
            for link_info in ident.getLinksInfo():
                if ident.isLinkRef(link_info):
                    link = ident.getLink(link_info)
                    if link.getXsdType():
                        write(gen_file, "        if %s_ref_infos:" % (ident.getLinkTo(link_info).getName().replace ('-', '_')))
                        write(gen_file, "            for ln, ref in %s_ref_infos:" % (ident.getLinkTo(link_info).getName().replace ('-', '_')))
                        write(gen_file, "                self.add_%s (ln, ref)" % (ident.getLinkTo(link_info).getName().replace ('-', '_')))
                    else:
                        write(gen_file, "        if %s_refs:" % (ident.getLinkTo(link_info).getName().replace ('-', '_')))
                        write(gen_file, "            for ln in %s_refs:" % (ident.getLinkTo(link_info).getName().replace ('-', '_')))
                        write(gen_file, "                self.add_%s (ln)" % (ident.getLinkTo(link_info).getName().replace ('-', '_')))

            for prop in ident.getProperties():
                prop_name = prop.getName().replace('-', '_')
                write(gen_file, "        self.%s = %s" % (prop_name, prop_name))

            write(gen_file, "    #end __init__")
            write(gen_file, "")
            write(gen_file, "    def _update_links (self, update_server):")
            for link_info in ident.getLinksInfo():
                if ident.isLinkRef(link_info):
                    write(gen_file, "        for ln in self.get_%ss ():" % (ident.getLinkTo(link_info).getName().replace ('-', '_')))
                    link = ident.getLink(link_info)
                    if link.getXsdType():
                        write(gen_file, "            self.add_%s (*ln.fixture (), update_server = update_server, add_link = False)" \
                                                               % (ident.getLinkTo(link_info).getName().replace ('-', '_')))
                    else:
                        write(gen_file, "            self.add_%s (ln.fixture (), update_server = update_server, add_link = False)" \
                                                               % (ident.getLinkTo(link_info).getName().replace ('-', '_')))
            write(gen_file, "        return None")
            write(gen_file, "    #end _update_links")
            write(gen_file, "")
            for link_info in ident.getLinksInfo():
                if ident.isLinkRef(link_info):
                    link = ident.getLink(link_info)
                    if link.getXsdType():
                        lnnm = ident.getLinkTo(link_info).getName().replace (
                                '-', '_')
                        write(gen_file, "    def add_%s (self, lo, ref, update_server = True, add_link = True):" % (
                                    lnnm))
                        write(gen_file, "        '''")
                        write(gen_file, "        add :class:`%s` link to :class:`%s`" % (CamelCase(lnnm), class_name))
                        write(gen_file, "        Args:")
                        write(gen_file, "            lo (:class:`%s`): obj to link" % (CamelCase(lnnm)))
                        write(gen_file, "            ref (:class:`%s`): property of the link object" % (link.getXsdType()))
                        write(gen_file, "        '''")
                        write(gen_file, "        if self._obj:")
                        write(gen_file, "            self._obj.add_%s (lo, ref)" % (ident.getLinkTo(link_info).getName().replace ('-', '_')))
                        write(gen_file, "            if update_server:")
                        write(gen_file, "                self._conn_drv.%s_update (self._obj)" %(method_name))
                        write(gen_file, "")
                        write(gen_file, "        if add_link:")
                        write(gen_file, "            self.add_link('%s', cfixture.ConrtailLink('%s', '%s', '%s', %s, (lo, ref)))" % (
                                        ident.getLinkTo(link_info).getName().replace ('-', '_'),
                                        ident.getLinkTo(link_info).getName().replace ('-', '_'),
                                        ident.getName().replace ('-', '_'),
                                        ident.getLinkTo(link_info).getName().replace('-', '_'),
                                        str (link_info[2])))
                    else:
                        lnnm = ident.getLinkTo(link_info).getName().replace (
                                '-', '_')
                        write(gen_file, "    def add_%s (self, lo, update_server = True, add_link = True):" % (lnnm))
                        write(gen_file, "        '''")
                        write(gen_file, "        add :class:`%s` link to :class:`%s`" % (CamelCase(lnnm), class_name))
                        write(gen_file, "        Args:")
                        write(gen_file, "            lo (:class:`%s`): obj to link" % (CamelCase(lnnm)))
                        write(gen_file, "        '''")
                        write(gen_file, "        if self._obj:")
                        write(gen_file, "            self._obj.add_%s (lo)" % (ident.getLinkTo(link_info).getName().replace ('-', '_')))
                        write(gen_file, "            if update_server:")
                        write(gen_file, "                self._conn_drv.%s_update (self._obj)" %(method_name))
                        write(gen_file, "")
                        write(gen_file, "        if add_link:")
                        write(gen_file, "            self.add_link('%s', cfixture.ConrtailLink('%s', '%s', '%s', %s, lo))" % (
                                        ident.getLinkTo(link_info).getName().replace ('-', '_'),
                                        ident.getLinkTo(link_info).getName().replace ('-', '_'),
                                        ident.getName().replace ('-', '_'),
                                        ident.getLinkTo(link_info).getName().replace('-', '_'),
                                        str (link_info[2])))
                    write(gen_file, "    #end add_%s_link" % (ident.getLinkTo(link_info).getName().replace ('-', '_')))
                    write(gen_file, "")
                    write(gen_file, "    def get_%ss (self):" % (ident.getLinkTo(link_info).getName().replace ('-', '_')))
                    write(gen_file, "        return self.get_links ('%s')" % (
                                    ident.getLinkTo(link_info).getName().replace ('-', '_')))
                    write(gen_file, "    #end get_%ss" % (ident.getLinkTo(link_info).getName().replace ('-', '_')))
            write(gen_file, "")
            write(gen_file, "    def populate (self):")
            for prop in ident.getProperties():
                prop_name = prop.getName().replace('-', '_')
                ctype = prop._xelement.type
                if ctype.startswith ('xsd:'):
                    popstr = 'GeneratedsSuper.populate_%s("%s")' % (
                            ctype.replace ('xsd:', ''), prop_name)
                else:
                    if prop.getElement().getMaxOccurs() > 1:
                        popstr = '[vnc_api.gen.%s_xsd.%s.populate()]' % (gen_filename_pfx, ctype)
                    else:
                        popstr = 'vnc_api.gen.%s_xsd.%s.populate()' % (gen_filename_pfx, ctype)
                write(gen_file, "        self._obj.set_%s(self.%s or %s)" % (
                            prop_name, prop_name, popstr))
            write(gen_file, "    #end populate")
            write(gen_file, "")
            write(gen_file, "    def setUp(self):")
            write(gen_file, "        super(%sTestFixtureGen, self).setUp()" %(class_name))

            if parents:
                if parents[-1][0]._name == 'config-root':
                    write(gen_file, "        # child of config-root")
                    write(gen_file, "        self._obj = vnc_api.%s(self._name)" %(class_name))
                else:
                    if len(parents) > 1:
                        parent_fq_names = [parent_ident.getDefaultFQName() for (parent_ident, meta) in parents]
                        write(gen_file, "        if not self._parent_fixt:")
                        write(gen_file, "            raise AmbiguousParentError(\"%s\")" %(parent_fq_names))
                    else: # single parent in schema
                        (parent_ident, meta) = parents[0]
                        parent_name = parent_ident.getName()
                        parent_class_name = CamelCase(parent_name)
                        write(gen_file, "        if not self._parent_fixt:")
                        write(gen_file, "            self._parent_fixt = self.useFixture(%sTestFixtureGen(self._conn_drv, 'default-%s'))" \
                                                                                         %(parent_class_name, parent_name))
                    write(gen_file, "")
                    write(gen_file, "        self._obj = vnc_api.%s(self._name, self._parent_fixt.getObj ())" %(class_name))
            else: # no parents
                write(gen_file, "        self._obj = vnc_api.%s(self._name)" %(class_name))

            write(gen_file, "        try:")
            write(gen_file, "            self._obj = self._conn_drv.%s_read (fq_name=self._obj.get_fq_name())" %(method_name))
            write(gen_file, "            self._update_links (update_server=True)")
            write(gen_file, "        except NoIdError:")
            write(gen_file, "            self._update_links (update_server=False)")
            write(gen_file, "            if self._auto_prop_val:")
            write(gen_file, "                self.populate ()")
            write(gen_file, "            else:")
            for prop in ident.getProperties():
                prop_name = prop.getName().replace('-', '_')
                write(gen_file, "                self._obj.%s = self.%s" % (prop_name, prop_name))

            write(gen_file, "            self._conn_drv.%s_create(self._obj)" %(method_name))
            write(gen_file, "            # read back for server allocated values")
            write(gen_file, "            self._obj = self._conn_drv.%s_read(id = self._obj.uuid)" %(method_name))
            write(gen_file, "    #end setUp")
            write(gen_file, "")
            write(gen_file, "    def cleanUp(self):")
            write(gen_file, "        try:")
            write(gen_file, "            self._conn_drv.%s_delete(id = self._obj.uuid)" %(method_name))
            write(gen_file, "        except RefsExistError:")
            write(gen_file, "            return")
            if parents:
                write(gen_file, "        parent_fixt = getattr(self, '_parent_fixt', None)")
                write(gen_file, "        if parent_fixt:")
                write(gen_file, "            # non config-root child")
                write(gen_file, "            parent_obj = self._parent_fixt.getObj()")
                write(gen_file, "            # remove child from parent obj")
                write(gen_file, "            for child_obj in parent_obj.get_%ss() or []:" %(method_name))
                write(gen_file, "                if type(child_obj) == dict:")
                write(gen_file, "                    child_uuid = child_obj['uuid']")
                write(gen_file, "                else:")
                write(gen_file, "                    child_uuid = child_obj.uuid")
                write(gen_file, "                if child_uuid == self._obj.uuid:")
                write(gen_file, "                    parent_obj.%ss.remove(child_obj)" %(method_name))
                write(gen_file, "                    break")
                write(gen_file, "")
            write(gen_file, "    #end cleanUp")
            write(gen_file, "")
            write(gen_file, "    def getObj(self):")
            write(gen_file, "        return self._obj")
            write(gen_file, "    #end getObj")
            write(gen_file, "")
            write(gen_file, "#end class %sTestFixtureGen" %(class_name))
            write(gen_file, "")
    #end _generate_test_classes

    def _generate_conn_drv_impl(self, gen_fname, gen_type_pfx):
        gen_file = self._xsd_parser.makeFile(gen_fname)
        write(gen_file, "")
        write(gen_file, "# AUTO-GENERATED file from %s. Do Not Edit!" \
              %(self.__class__.__name__))
        write(gen_file, "")
        write(gen_file, "import abc")
        write(gen_file, "")

        write(gen_file, "class ConnectionDriverBase(object):")
        write(gen_file, '    """')
        write(gen_file, "    This class provides type specific methods to create,")
        write(gen_file, "    read, update, delete and list objects from the server")
        write(gen_file, '    """')
        write(gen_file, "")
        write(gen_file, "    __metaclass__ = abc.ABCMeta")
        write(gen_file, "")
        write(gen_file, "    @abc.abstractmethod")
        write(gen_file, "    def __init__(self):")
        write(gen_file, "        pass")
        write(gen_file, "    #end __init__")

        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            method_name = ident_name.replace('-', '_')
            camel_name = CamelCase(ident_name)
            parents = ident.getParents()

            write(gen_file, "    def %s_create(self, obj):" %(method_name))
            write(gen_file, '        """Create new %s.' % (ident_name))
            write(gen_file, '        ')
            write(gen_file, '        :param obj: :class:`.%s` object' % (camel_name))
            write(gen_file, '        ')
            write(gen_file, '        """')
            write(gen_file, "        raise NotImplementedError, '%s_create is %%s\\'s responsibility' %% (str(type (self)))" % method_name)
            write(gen_file, "    #end %s_create" %(method_name))
            write(gen_file, "")

            write(gen_file, "    def %s_read(self, fq_name = None, fq_name_str = None, id = None, ifmap_id = None):" \
                                     %(method_name))
            write(gen_file, '        """Return %s information.' % (ident_name))
            write(gen_file, '        ')
            write(gen_file, '        :param fq_name: Fully qualified name of %s' % (ident_name))
            write(gen_file, '        :param fq_name_str: Fully qualified name string of %s' % (ident_name))
            write(gen_file, '        :param id: UUID of %s' % (ident_name))
            write(gen_file, '        :param ifmap_id: IFMAP id of %s' % (ident_name))
            write(gen_file, '        :returns: :class:`.%s` object' % (camel_name))
            write(gen_file, '        ')
            write(gen_file, '        """')
            write(gen_file, "        raise NotImplementedError, '%s_read is %%s\\'s responsibility' %% (str(type (self)))" % method_name)
            write(gen_file, "    #end %s_read" %(method_name))
            write(gen_file, "")

            write(gen_file, "    def %s_update(self, obj):" %(method_name))
            write(gen_file, '        """Update %s.' % (ident_name))
            write(gen_file, '        ')
            write(gen_file, '        :param obj: :class:`.%s` object' % (camel_name))
            write(gen_file, '        ')
            write(gen_file, '        """')
            write(gen_file, "        raise NotImplementedError, '%s_update is %%s\\'s responsibility' %% (str(type (self)))" % method_name)
            write(gen_file, "    #end %s_update" %(method_name))
            write(gen_file, "")

            list_args = "self"
            if parents:
                list_args = list_args + ", parent_id = None, parent_fq_name = None"
            if ident.getReferences():
                list_args = list_args + ", back_ref_id = None"
            list_args = list_args + ", obj_uuids = None, fields = None, detail = False, count = False"
            write(gen_file, "    def %ss_list(%s):" \
                                     %(method_name, list_args))
            if parents:
                write(gen_file, '        """List all %ss.' % (ident_name))
                write(gen_file, '        ')
                write(gen_file, '        :param parent_id: UUID of parent as optional search filter')
                write(gen_file, '        :param parent_fq_name: full qualified name of parent as optional search filter')
                write(gen_file, '        :returns: list of :class:`.%s` objects' %(camel_name))
                write(gen_file, '        ')
                write(gen_file, '        """')
            else:
                write(gen_file, '        """List all %ss."""' % (ident_name))
            write(gen_file, "        raise NotImplementedError, '%ss_list is %%s\\'s responsibility' %% (str(type (self)))" % method_name)

            write(gen_file, "    #end %ss_list" %(method_name))
            write(gen_file, "")
            write(gen_file, "    def %s_delete(self, fq_name = None, id = None, ifmap_id = None):" \
                                     %(method_name))
            write(gen_file, '        """Delete %s from the system.' % (ident_name))
            write(gen_file, '        ')
            write(gen_file, '        :param fq_name: Fully qualified name of %s' % (ident_name))
            write(gen_file, '        :param id: UUID of %s' % (ident_name))
            write(gen_file, '        :param ifmap_id: IFMAP id of %s' % (ident_name))
            write(gen_file, '        ')
            write(gen_file, '        """')
            write(gen_file, "        raise NotImplementedError, '%s_delete is %%s\\'s responsibility' %% (str(type (self)))" % method_name)
            write(gen_file, "    #end %s_delete" %(method_name))
            write(gen_file, "")
            write(gen_file, "    def get_default_%s_id(self):" %(method_name))
            write(gen_file, '        """Return UUID of default %s."""' %(ident_name))
            write(gen_file, "        raise NotImplementedError, 'get_default_%s_delete is %%s\\'s responsibility' %% (str(type (self)))" % method_name)
            write(gen_file, "    #end get_default_%s_delete" %(method_name))
            write(gen_file, "")

        write(gen_file, "#end class ConnectionDriverBase")
        write(gen_file, "")

    #end _generate_conn_drv_impl


    def _generate_client_impl(self, gen_fname, gen_type_pfx):
        gen_file = self._xsd_parser.makeFile(gen_fname)
        write(gen_file, "")
        write(gen_file, "# AUTO-GENERATED file from %s. Do Not Edit!" \
              %(self.__class__.__name__))
        write(gen_file, "")
        write(gen_file, "all_resource_types = set([")
        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            write(gen_file, "    '%s'," %(ident_name))
        write(gen_file, "    ])")
    #end _generate_client_impl

    def _generate_server_impl(self, gen_fname, gen_type_pfx):
        gen_file = self._xsd_parser.makeFile(gen_fname)
        write(gen_file, "")
        write(gen_file, "# AUTO-GENERATED file from %s. Do Not Edit!" \
              %(self.__class__.__name__))
        write(gen_file, "")
        write(gen_file, "all_resource_types = set([")
        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            write(gen_file, "    '%s'," %(ident_name))
        write(gen_file, "    ])")
    #end _generate_server_impl

    def _generate_extension_impl(self, gen_fname, gen_type_pfx):
        gen_file = self._xsd_parser.makeFile(gen_fname)
        write(gen_file, "")
        write(gen_file, "# AUTO-GENERATED file from %s. Do Not Edit!" \
              %(self.__class__.__name__))
        write(gen_file, "")
        write(gen_file, "class ResourceApiGen(object):")
        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            method_name = ident_name.replace('-', '_')
            write(gen_file, "    def pre_%s_create(self, resource_dict, **kwargs):" %(method_name))
            write(gen_file, '        """')
            write(gen_file, "        Method called before %s is created" %(ident_name))
            write(gen_file, '        """')
            write(gen_file, "        pass")
            write(gen_file, "    #end pre_%s_create" %(method_name))
            write(gen_file, "")
            write(gen_file, "    def post_%s_create(self, resource_dict, **kwargs):" %(method_name))
            write(gen_file, '        """')
            write(gen_file, "        Method called after %s is created" %(ident_name))
            write(gen_file, '        """')
            write(gen_file, "        pass")
            write(gen_file, "    #end post_%s_create" %(method_name))
            write(gen_file, "")
            write(gen_file, "    def pre_%s_read(self, resource_id, **kwargs):" %(method_name))
            write(gen_file, '        """')
            write(gen_file, "        Method called before %s is read" %(ident_name))
            write(gen_file, '        """')
            write(gen_file, "        pass")
            write(gen_file, "    #end pre_%s_read" %(method_name))
            write(gen_file, "")
            write(gen_file, "    def post_%s_read(self, resource_id, resource_dict, **kwargs):" %(method_name))
            write(gen_file, '        """')
            write(gen_file, "        Method called after %s is read" %(ident_name))
            write(gen_file, '        """')
            write(gen_file, "        pass")
            write(gen_file, "    #end post_%s_read" %(method_name))
            write(gen_file, "")
            write(gen_file, "    def pre_%s_update(self, resource_id, resource_dict," %(method_name))
            write(gen_file, "            prop_collection_updates=None, ref_update=None, **kwargs):")
            write(gen_file, '        """')
            write(gen_file, "        Method called before %s is updated" %(ident_name))
            write(gen_file, '        """')
            write(gen_file, "        pass")
            write(gen_file, "    #end pre_%s_update" %(method_name))
            write(gen_file, "")
            write(gen_file, "    def post_%s_update(self, resource_id, resource_dict, old_dict," %(method_name))
            write(gen_file, "            prop_collection_updates=None, ref_update=None, **kwargs):")
            write(gen_file, '        """')
            write(gen_file, "        Method called after %s is updated" %(ident_name))
            write(gen_file, '        """')
            write(gen_file, "        pass")
            write(gen_file, "    #end post_%s_update" %(method_name))
            write(gen_file, "")
            write(gen_file, "    def pre_%s_delete(self, resource_id, **kwargs):" %(method_name))
            write(gen_file, '        """')
            write(gen_file, "        Method called before %s is deleted" %(ident_name))
            write(gen_file, '        """')
            write(gen_file, "        pass")
            write(gen_file, "    #end pre_%s_delete" %(method_name))
            write(gen_file, "")
            write(gen_file, "    def post_%s_delete(self, resource_id, resource_dict, **kwargs):" %(method_name))
            write(gen_file, '        """')
            write(gen_file, "        Method called after %s is deleted" %(ident_name))
            write(gen_file, '        """')
            write(gen_file, "        pass")
            write(gen_file, "    #end post_%s_delete" %(method_name))
            write(gen_file, "")
        write(gen_file, "#end class ResourceApiGen")
    #end _generate_extension_impl

    def _generate_test_impl(self, gen_fname, gen_type_pfx):
        gen_file = self._xsd_parser.makeFile(gen_fname)
        write(gen_file, "")
        write(gen_file, "# AUTO-GENERATED file from %s. Do Not Edit!" \
              %(self.__class__.__name__))
        write(gen_file, "")
        write(gen_file, "import fixtures")
        write(gen_file, "import testtools")
        write(gen_file, "")
        write(gen_file, "from %s_test import *" %(gen_type_pfx))
        write(gen_file, "")
        class_name = CamelCase(os.path.basename(gen_fname.split('.py')[0]))
        write(gen_file, "class %s(testtools.TestCase, fixtures.TestWithFixtures):" %(class_name))
        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            if ident_name == _BASE_PARENT:
                continue

            camel_name = CamelCase(ident_name)
            method_name = ident_name.replace('-', '_')
            write(gen_file, "    def test_%s_crud(self):" %(method_name))
            write(gen_file, "        self.useFixture(%sTestFixtureGen(self._vnc_lib))" %(camel_name))
            write(gen_file, "    #end test_%s_crud" %(method_name))
            write(gen_file, "")

        write(gen_file, "#end class %s" %(class_name))
    #end _generate_test_impl

    def _generate_docs_schema(self, gen_fname, gen_type_pfx):
        gen_file = self._xsd_parser.makeFile(gen_fname)
        write(gen_file, "")
        write(gen_file, "# AUTO-GENERATED file from %s. Do Not Edit!" \
              %(self.__class__.__name__))
        write(gen_file, "")
        write(gen_file, "import pydot")
        write(gen_file, "")
        write(gen_file, "def generate_schema_graph():")
        write(gen_file, "    graph = pydot.Dot(graph_type='digraph')")
        write(gen_file, "")
        write(gen_file, "    # Generate node definitions and add to graph")
        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            method_name = ident_name.replace('-', '_')
            write(gen_file, "    %s_node = pydot.Node('%s')" %(method_name, ident_name))
            write(gen_file, "    graph.add_node(%s_node)" %(method_name))

        write(gen_file, "")
        write(gen_file, "    # Generate edge definitions and add to graph")
        for ident in self._non_exclude_idents():
            ident_name = ident.getName()
            #if ident_name == _BASE_PARENT:
            #    continue

            method_name = ident_name.replace('-', '_')

            for link_info in ident.getLinksInfo():
                to_ident = ident.getLinkTo(link_info)
                to_method_name = to_ident.getName().replace('-', '_')
                is_ref = ident.isLinkRef(link_info)
                is_has = ident.isLinkHas(link_info)
                if is_has:
                    child_ident = to_ident
                    child_method_name = child_ident.getName().replace('-', '_')
                    write(gen_file, "    graph.add_edge(pydot.Edge(%s_node, %s_node, color = 'red'))" %(method_name, child_method_name))
                elif is_ref:
                    write(gen_file, "    graph.add_edge(pydot.Edge(%s_node, %s_node, color = 'blue', constraint = False))" \
                                                                   %(method_name, to_method_name))

        write(gen_file, "")
        write(gen_file, "    return graph")
        write(gen_file, "#end generate_schema_graph")
        write(gen_file, "")
        write(gen_file, "def write_schema_graph(graph, filename):")
        write(gen_file, "    graph.write_xdot(filename)")
        write(gen_file, "#end write_schema_graph")
        write(gen_file, "")
    #end _generate_docs_schema

#end class IFMapApiGenerator
